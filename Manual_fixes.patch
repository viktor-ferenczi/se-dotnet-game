From c2b1c34cf539503b9bc09c3e92b2f9db6c419995 Mon Sep 17 00:00:00 2001
From: Viktor Ferenczi <viktor@ferenczi.eu>
Date: Wed, 30 Oct 2024 15:36:29 +0100
Subject: [PATCH] Manual fixes

---
 .../Sandbox/ModAPI/Ingame/MyGridProgram.cs    |   1 +
 .../ModAPI/Ingame/MyInventoryItemFilter.cs    |   4 +-
 Sandbox.Game/Sandbox.Game.csproj              |   1 +
 .../Engine/Analytics/MySpaceAnalytics.cs      |   3 +
 .../Multiplayer/MyClientDebugCommands.cs      |   1 +
 .../Multiplayer/MyServerDebugCommands.cs      |   1 +
 Sandbox.Game/Sandbox/Engine/Utils/MyConfig.cs |   5 +
 Sandbox.Game/Sandbox/Engine/Utils/MyFakes.cs  |   4 +
 .../Game/Components/MyEntityStatComponent.cs  |   2 +-
 .../Game/Entities/Blocks/MyContractBlock.cs   |   8 +-
 .../Game/Entities/Blocks/MyLightingBlock.cs   |   4 +-
 .../Entities/Blocks/MyTargetDummyBlock.cs     |  12 +-
 .../Game/Entities/Character/MyCharacter.cs    |   2 +-
 .../Game/Entities/Cube/MyGridClipboard.cs     |   2 +-
 .../Sandbox/Game/Entities/Cube/MyGridShape.cs |   4 +-
 .../Sandbox/Game/Entities/Cube/MySlimBlock.cs |   8 +-
 .../Sandbox/Game/Entities/MyCubeBuilder.cs    |   6 +-
 .../Sandbox/Game/Entities/MyCubeGrid.cs       |   2 +-
 .../Sandbox/Game/Entities/MyReactor.cs        |  12 +-
 .../MySphericalNaturalGravityComponent.cs     |   2 +-
 .../Sandbox/Game/Entities/MyVoxelBase.cs      |   4 +-
 .../GameSystems/Chat/MyChatCommandSystem.cs   |   1 +
 .../CoordinateSystem/MyCoordinateSystem.cs    |   2 +-
 .../GameSystems/MyHeightMapLoadingSystem.cs   |   4 +
 .../Game/GameSystems/MyShipMiningSystem.cs    |   4 +-
 .../Sandbox/Game/Gui/MyGuiScreenAdminMenu.cs  |   2 +-
 .../Game/Gui/MyGuiScreenDebugNetwork.cs       |   2 +-
 .../Game/Gui/MyTerminalInfoController.cs      |   2 +-
 .../Game/Multiplayer/MyGpsCollection.cs       |   4 +-
 .../StateGroups/MyPropertySyncStateGroup.cs   |   2 +-
 .../Sandbox/Game/Screens/MyFilterBool.cs      |   2 -
 .../Game/Screens/MyGuiScreenMainMenuBase.cs   |   3 +-
 .../Game/Screens/MyGuiScreenSimpleNewGame.cs  |   2 +-
 .../SessionComponents/MyHighlightSystem.cs    |   7 +-
 .../Sandbox/Game/Weapons/MyShipDrill.cs       |  12 +-
 .../Sandbox/Game/World/MyBlockLimits.cs       |   2 +-
 .../Sandbox/MyCommonProgramStartup.cs         |   1 +
 Sandbox.Game/Sandbox/MyInitializer.cs         |  13 +-
 Sandbox.Game/Sandbox/MySandboxGame.cs         |   8 +-
 Sandbox.Game/app.config                       |  27 ----
 .../MyGuiScreenNewGameScenarioSelection.cs    |   2 +-
 ...iScreenScenarioSelectionCustomizeScreen.cs |   2 +-
 .../SpaceEngineers.Game.csproj                |   7 +
 .../Entities/Blocks/MyFlightMovementBlock.cs  |   6 +-
 .../Game/GUI/MyGuiScreenMedicals.cs           |   2 +-
 .../Game/MySpaceGameCustomInitialization.cs   |  56 +++++---
 .../SpaceEngineers/Game/SpaceEngineersGame.cs |   4 +
 .../Game/World/MySpaceRespawnComponent.cs     |   2 +-
 .../MyObjectBuilder_AutomaticRifle.cs         |   4 +-
 SpaceEngineers/SpaceEngineers.csproj          |   9 ++
 SpaceEngineers/SpaceEngineers/MyProgram.cs    |  10 ++
 SpaceEngineers/app.config                     |  21 ---
 SpaceEngineers/steam_appid.txt                |   1 +
 VRage.Audio/VRage/Audio/MyXAudio2.cs          |   2 +-
 VRage.EOS/VRage/EOS/MyEOSLobbyList.cs         |  36 ++---
 .../Game/Entity/MyPhysicalInventoryItem.cs    |   2 +
 VRage.Game/VRage/Game/MyDefinitionId.cs       |   4 +-
 .../MyObjectBuilder_GoodAIControlHandTool.cs  |   8 +-
 .../Game/MyObjectBuilder_HandToolBase.cs      |   4 +-
 .../MyObjectBuilder_AnimationSMVariable.cs    |   2 +
 .../MyObjectBuilder_HierarchyComponentBase.cs |   2 +-
 .../MyObjectBuilder_AnimationLayer.cs         |   3 +-
 .../MyObjectBuilder_NewListScriptNode.cs      |   4 +-
 .../MyObjectBuilder_SwitchScriptNode.cs       |   2 +-
 .../ObjectBuilders/MyObjectBuilder_Base.cs    |   2 +-
 .../MyRuntimeObjectBuilderId.cs               |   2 +-
 .../Private/MyObjectBuilderSerializerKeen.cs  |   4 +
 VRage.Game/app.config                         |  31 ----
 VRage.Library/VRage.Library.csproj            |   1 +
 .../VRage/Filesystem/MyFileSystem.cs          |   7 +-
 .../VRage/Serialization/ProtoSerializer.cs    |   2 +-
 VRage.Math/VRageMath/BoundingFrustumD.cs      |   4 +-
 VRage.Math/VRageMath/Gjk.cs                   |   2 +-
 VRage.Math/VRageMath/GjkD.cs                  |   2 +-
 .../-CrtImplementationDetails-/Progress.cs    |   1 -
 .../-CrtImplementationDetails-/TriBool.cs     |   1 -
 VRage.NativeAftermath/-Module-.cs             | 135 +++++++++++-------
 .../GFSDK_Aftermath_Device_Status.cs          |   1 -
 .../GFSDK_Aftermath_FeatureFlags.cs           |   1 -
 .../GFSDK_Aftermath_Result.cs                 |   1 -
 .../GFSDK_Aftermath_Version.cs                |   1 -
 VRage.NativeAftermath/ICLRRuntimeHost.cs      |   2 +-
 VRage.NativeAftermath/ICorRuntimeHost.cs      |   2 +-
 VRage.NativeAftermath/ID3D11Device.cs         |   2 +-
 VRage.NativeAftermath/ID3D11DeviceContext.cs  |   2 +-
 VRage.NativeAftermath/IUnknown.cs             |   2 +-
 .../NativeAftermath/MyAfterMath.cs            |   3 +-
 .../VRage.NativeAftermath.csproj              |   5 +-
 .../__scrt_native_startup_state.cs            |   1 -
 VRage.NativeAftermath/gcroot_System.cs        |   0
 .../VRage.Platform.Windows.csproj             |   4 +-
 .../Platform/Windows/Audio/MyPlatformAudio.cs |   2 +-
 .../Windows/Forms/MyMessageBoxCrashForm.cs    |   2 +-
 .../Platform/Windows/MyCrashReporting.cs      |   6 +
 .../VRage/Platform/Windows/MyVRagePlatform.cs |   2 +-
 .../Windows/Render/MyPlatformRender.cs        |   2 +
 .../Windows/Serialization/DynamicTypeModel.cs |   2 +-
 .../Platform/Windows/Sys/MyWindowsSystem.cs   |  12 ++
 VRage.Render/VRage/Render/Image/MyImage.cs    |  33 ++---
 .../VRageRender/Animations/MyConstProperty.cs |   5 +-
 .../Toolkit/Graphics/ImageSharpHelper.cs      |   1 +
 .../Resources/MyFileTextureImageCache.cs      |   9 ++
 VRage.Render11/VRageRender/MyTextureData.cs   |   4 +-
 .../VRage/Scripting/MyScriptCompiler.cs       |  11 +-
 .../VRage/Scripting/MyScriptWhitelist.cs      |   8 +-
 .../Scripting/MyVRageScriptingInternal.cs     |   2 +-
 .../Rewriters/PerfCountingRewriter.cs         |   4 +
 VRage/VRage.csproj                            |   7 +
 VRage/VRage/CustomRootWriter.cs               |   5 +-
 VRage/VRage/GameServices/MyInventoryHelper.cs |   5 +
 VRage/VRage/MyAbstractXmlSerializer.cs        |   2 +-
 VRage/VRage/Network/EndpointId.cs             |   2 +-
 VRage/VRage/Network/EventAttribute.cs         |   4 +-
 VRage/VRage/Network/MyEventTable.cs           |  27 +++-
 VRage/VRage/Network/MyReplicationClient.cs    |   1 +
 VRage/VRage/Network/MySynchronizedTypeInfo.cs |   6 +-
 VRage/VRage/Network/MyTypeTable.cs            |  40 +++++-
 VRage/VRage/Network/ReplicatedTypes.cs        |  69 +++++++++
 VRage/VRage/Serialization/StaticTypeModel.cs  |  34 -----
 .../VRage/Utils/Keen/MethodInfoExtensions.cs  |  15 ++
 VRage/VRage/Voxels/MyStorageData.cs           |   5 +
 121 files changed, 565 insertions(+), 366 deletions(-)
 delete mode 100644 Sandbox.Game/app.config
 delete mode 100644 SpaceEngineers/app.config
 create mode 100644 SpaceEngineers/steam_appid.txt
 delete mode 100644 VRage.Game/app.config
 create mode 100644 VRage.NativeAftermath/gcroot_System.cs
 create mode 100644 VRage/VRage/Network/ReplicatedTypes.cs
 delete mode 100644 VRage/VRage/Serialization/StaticTypeModel.cs
 create mode 100644 VRage/VRage/Utils/Keen/MethodInfoExtensions.cs

diff --git a/Sandbox.Common/Sandbox/ModAPI/Ingame/MyGridProgram.cs b/Sandbox.Common/Sandbox/ModAPI/Ingame/MyGridProgram.cs
index 81ad128c..0b22240a 100644
--- a/Sandbox.Common/Sandbox/ModAPI/Ingame/MyGridProgram.cs
+++ b/Sandbox.Common/Sandbox/ModAPI/Ingame/MyGridProgram.cs
@@ -1,5 +1,6 @@
 using System;
 using System.Reflection;
+using MethodInfoExtensions = System.MethodInfoExtensions;
 
 namespace Sandbox.ModAPI.Ingame;
 
diff --git a/Sandbox.Common/Sandbox/ModAPI/Ingame/MyInventoryItemFilter.cs b/Sandbox.Common/Sandbox/ModAPI/Ingame/MyInventoryItemFilter.cs
index f6689900..c6498370 100644
--- a/Sandbox.Common/Sandbox/ModAPI/Ingame/MyInventoryItemFilter.cs
+++ b/Sandbox.Common/Sandbox/ModAPI/Ingame/MyInventoryItemFilter.cs
@@ -45,12 +45,12 @@ public struct MyInventoryItemFilter
 	/// <summary>
 	/// Determines whether all subtypes of the given item ID should pass this filter check.
 	/// </summary>
-	public readonly bool AllSubTypes;
+	public bool AllSubTypes;
 
 	/// <summary>
 	/// Specifies an item to filter. Set <see cref="F:Sandbox.ModAPI.Ingame.MyInventoryItemFilter.AllSubTypes" /> to true to only check the main type part of this ID.
 	/// </summary>
-	public readonly MyDefinitionId ItemId;
+	public MyDefinitionId ItemId;
 
 	/// <summary>
 	///
diff --git a/Sandbox.Game/Sandbox.Game.csproj b/Sandbox.Game/Sandbox.Game.csproj
index e423be04..1ffd034f 100644
--- a/Sandbox.Game/Sandbox.Game.csproj
+++ b/Sandbox.Game/Sandbox.Game.csproj
@@ -15,6 +15,7 @@
     <PackageReference Include="System.Buffers" Version="4.5.1" />
     <PackageReference Include="System.Collections.Immutable" Version="8.0.0" />
     <PackageReference Include="System.ComponentModel.Annotations" Version="4.6.0" />
+    <PackageReference Include="System.Management" Version="4.5.0" />
     <PackageReference Include="System.Memory" Version="4.5.5" />
     <PackageReference Include="System.Runtime.CompilerServices.Unsafe" Version="6.0.0" />
     <PackageReference Include="protobuf-net.Core" Version="3.0.131" />
diff --git a/Sandbox.Game/Sandbox/Engine/Analytics/MySpaceAnalytics.cs b/Sandbox.Game/Sandbox/Engine/Analytics/MySpaceAnalytics.cs
index b2f81802..1d477459 100644
--- a/Sandbox.Game/Sandbox/Engine/Analytics/MySpaceAnalytics.cs
+++ b/Sandbox.Game/Sandbox/Engine/Analytics/MySpaceAnalytics.cs
@@ -403,6 +403,9 @@ public sealed class MySpaceAnalytics : MyAnalyticsManager
 
 	private void StartSession(bool firstTimeRun)
 	{
+		// DISABLED ANALYTICS
+		return;
+
 		if (!m_isSessionStarted)
 		{
 			if (m_hashedUserID == null)
diff --git a/Sandbox.Game/Sandbox/Engine/Multiplayer/MyClientDebugCommands.cs b/Sandbox.Game/Sandbox/Engine/Multiplayer/MyClientDebugCommands.cs
index a92bd17e..c8777a20 100644
--- a/Sandbox.Game/Sandbox/Engine/Multiplayer/MyClientDebugCommands.cs
+++ b/Sandbox.Game/Sandbox/Engine/Multiplayer/MyClientDebugCommands.cs
@@ -5,6 +5,7 @@ using System.Linq;
 using System.Reflection;
 using Sandbox.Game.World;
 using VRage.Network;
+using MethodInfoExtensions = System.MethodInfoExtensions;
 
 namespace Sandbox.Engine.Multiplayer;
 
diff --git a/Sandbox.Game/Sandbox/Engine/Multiplayer/MyServerDebugCommands.cs b/Sandbox.Game/Sandbox/Engine/Multiplayer/MyServerDebugCommands.cs
index 3cb02c6f..53181d1a 100644
--- a/Sandbox.Game/Sandbox/Engine/Multiplayer/MyServerDebugCommands.cs
+++ b/Sandbox.Game/Sandbox/Engine/Multiplayer/MyServerDebugCommands.cs
@@ -10,6 +10,7 @@ using Sandbox.Game.World;
 using VRage.Game.Entity;
 using VRage.Network;
 using VRageMath;
+using MethodInfoExtensions = System.MethodInfoExtensions;
 
 namespace Sandbox.Engine.Multiplayer;
 
diff --git a/Sandbox.Game/Sandbox/Engine/Utils/MyConfig.cs b/Sandbox.Game/Sandbox/Engine/Utils/MyConfig.cs
index f6b0b482..ef0d543e 100644
--- a/Sandbox.Game/Sandbox/Engine/Utils/MyConfig.cs
+++ b/Sandbox.Game/Sandbox/Engine/Utils/MyConfig.cs
@@ -1,3 +1,6 @@
+// See https://learn.microsoft.com/en-us/dotnet/standard/serialization/binaryformatter-security-guide
+#pragma warning disable SYSLIB0011
+
 using System;
 using System.Collections.Generic;
 using System.IO;
@@ -2354,3 +2357,5 @@ public class MyConfig : MyConfigBase, IMyConfig
 		MyNewGameScreenABTestHelper.Instance.ActivateTest();
 	}
 }
+
+#pragma warning restore SYSLIB0011
\ No newline at end of file
diff --git a/Sandbox.Game/Sandbox/Engine/Utils/MyFakes.cs b/Sandbox.Game/Sandbox/Engine/Utils/MyFakes.cs
index 9bee0af4..835a6e57 100644
--- a/Sandbox.Game/Sandbox/Engine/Utils/MyFakes.cs
+++ b/Sandbox.Game/Sandbox/Engine/Utils/MyFakes.cs
@@ -1353,7 +1353,11 @@ public static class MyFakes
 		ENABLE_WAIT_UNTIL_MULTIPLAYER_READY = true;
 		ENABLE_PRELOAD_CHARACTER_ANIMATIONS = true;
 		LOADING_STREAMING_TIMEOUT_ENABLED = true;
+#if DEBUG
+		ENABLE_MINIDUMP_SENDING = false;
+#else
 		ENABLE_MINIDUMP_SENDING = true;
+#endif
 		COLLECT_SUSPEND_DUMPS = false;
 		USE_GPS_AS_FRIENDLY_SPAWN_LOCATIONS = false;
 		I_AM_READY_FOR_NEW_BLUEPRINT_SCREEN = true;
diff --git a/Sandbox.Game/Sandbox/Game/Components/MyEntityStatComponent.cs b/Sandbox.Game/Sandbox/Game/Components/MyEntityStatComponent.cs
index 49dc633c..da9b33b4 100644
--- a/Sandbox.Game/Sandbox/Game/Components/MyEntityStatComponent.cs
+++ b/Sandbox.Game/Sandbox/Game/Components/MyEntityStatComponent.cs
@@ -27,7 +27,7 @@ namespace Sandbox.Game.Components;
 public class MyEntityStatComponent : MyEntityComponentBase
 {
 	[Serializable]
-	private struct StatInfo
+	protected struct StatInfo
 	{
 		private class Sandbox_Game_Components_MyEntityStatComponent_003C_003EStatInfo_003C_003EStatId_003C_003EAccessor : IMemberAccessor<StatInfo, MyStringHash>
 		{
diff --git a/Sandbox.Game/Sandbox/Game/Entities/Blocks/MyContractBlock.cs b/Sandbox.Game/Sandbox/Game/Entities/Blocks/MyContractBlock.cs
index eb27d167..ea14c181 100644
--- a/Sandbox.Game/Sandbox/Game/Entities/Blocks/MyContractBlock.cs
+++ b/Sandbox.Game/Sandbox/Game/Entities/Blocks/MyContractBlock.cs
@@ -143,7 +143,7 @@ public class MyContractBlock : MyFunctionalBlock, IMyConveyorEndpointBlock, IMyM
 	}
 
 	[Serializable]
-	private struct MyContractCreationDataWrapper_Deliver
+	protected struct MyContractCreationDataWrapper_Deliver
 	{
 		private class Sandbox_Game_Entities_Blocks_MyContractBlock_003C_003EMyContractCreationDataWrapper_Deliver_003C_003ERewardMoney_003C_003EAccessor : IMemberAccessor<MyContractCreationDataWrapper_Deliver, int>
 		{
@@ -215,7 +215,7 @@ public class MyContractBlock : MyFunctionalBlock, IMyConveyorEndpointBlock, IMyM
 	}
 
 	[Serializable]
-	private struct MyContractCreationDataWrapper_ObtainAndDeliver
+	protected struct MyContractCreationDataWrapper_ObtainAndDeliver
 	{
 		private class Sandbox_Game_Entities_Blocks_MyContractBlock_003C_003EMyContractCreationDataWrapper_ObtainAndDeliver_003C_003ERewardMoney_003C_003EAccessor : IMemberAccessor<MyContractCreationDataWrapper_ObtainAndDeliver, int>
 		{
@@ -321,7 +321,7 @@ public class MyContractBlock : MyFunctionalBlock, IMyConveyorEndpointBlock, IMyM
 	}
 
 	[Serializable]
-	private struct MyContractCreationDataWrapper_Find
+	protected struct MyContractCreationDataWrapper_Find
 	{
 		private class Sandbox_Game_Entities_Blocks_MyContractBlock_003C_003EMyContractCreationDataWrapper_Find_003C_003ERewardMoney_003C_003EAccessor : IMemberAccessor<MyContractCreationDataWrapper_Find, int>
 		{
@@ -410,7 +410,7 @@ public class MyContractBlock : MyFunctionalBlock, IMyConveyorEndpointBlock, IMyM
 	}
 
 	[Serializable]
-	private struct MyContractCreationDataWrapper_Repair
+	protected struct MyContractCreationDataWrapper_Repair
 	{
 		private class Sandbox_Game_Entities_Blocks_MyContractBlock_003C_003EMyContractCreationDataWrapper_Repair_003C_003ERewardMoney_003C_003EAccessor : IMemberAccessor<MyContractCreationDataWrapper_Repair, int>
 		{
diff --git a/Sandbox.Game/Sandbox/Game/Entities/Blocks/MyLightingBlock.cs b/Sandbox.Game/Sandbox/Game/Entities/Blocks/MyLightingBlock.cs
index 7abaf9d3..7d8af120 100644
--- a/Sandbox.Game/Sandbox/Game/Entities/Blocks/MyLightingBlock.cs
+++ b/Sandbox.Game/Sandbox/Game/Entities/Blocks/MyLightingBlock.cs
@@ -490,9 +490,9 @@ public abstract class MyLightingBlock : MyFunctionalBlock, Sandbox.ModAPI.IMyLig
 				float? num3 = null;
 				List<Sandbox.ModAPI.Ingame.IMyTerminalBlock> list = new List<Sandbox.ModAPI.Ingame.IMyTerminalBlock>();
 				item.FetchAllBlocks(list);
-				foreach (Sandbox.ModAPI.Ingame.IMyTerminalBlock item in list)
+				foreach (Sandbox.ModAPI.Ingame.IMyTerminalBlock myTerminalBlock in list)
 				{
-					if (item is MyLightingBlock myLightingBlock)
+					if (myTerminalBlock is MyLightingBlock myLightingBlock)
 					{
 						float val = (myLightingBlock.m_lightingLogic.IsReflector ? myLightingBlock.m_lightingLogic.ReflectorRadiusBounds.Min : myLightingBlock.m_lightingLogic.RadiusBounds.Min);
 						num = Math.Min(num, val);
diff --git a/Sandbox.Game/Sandbox/Game/Entities/Blocks/MyTargetDummyBlock.cs b/Sandbox.Game/Sandbox/Game/Entities/Blocks/MyTargetDummyBlock.cs
index c6e166ab..2a8cf686 100644
--- a/Sandbox.Game/Sandbox/Game/Entities/Blocks/MyTargetDummyBlock.cs
+++ b/Sandbox.Game/Sandbox/Game/Entities/Blocks/MyTargetDummyBlock.cs
@@ -1035,15 +1035,7 @@ public class MyTargetDummyBlock : MyFunctionalBlock, Sandbox.ModAPI.IMyTargetDum
 		return null;
 	}
 
-	[SpecialName]
-	int IMyInventoryOwner.get_InventoryCount()
-	{
-		return base.InventoryCount;
-	}
+	[SpecialName] int IMyInventoryOwner.InventoryCount => base.InventoryCount;
 
-	[SpecialName]
-	bool IMyInventoryOwner.get_HasInventory()
-	{
-		return base.HasInventory;
-	}
+	[SpecialName] bool IMyInventoryOwner.HasInventory => base.HasInventory;
 }
diff --git a/Sandbox.Game/Sandbox/Game/Entities/Character/MyCharacter.cs b/Sandbox.Game/Sandbox/Game/Entities/Character/MyCharacter.cs
index 476fafd8..c920b308 100644
--- a/Sandbox.Game/Sandbox/Game/Entities/Character/MyCharacter.cs
+++ b/Sandbox.Game/Sandbox/Game/Entities/Character/MyCharacter.cs
@@ -8122,7 +8122,7 @@ public class MyCharacter : MySkinnedEntity, IMyCameraController, IMyControllable
 			{
 				MyGuiScreenGamePlay.ActiveGameplayScreen.CloseScreen();
 			}
-			MyCubeBuilder.Static.Deactivate();
+			MyCubeBuilder.Static?.Deactivate();
 			if (!base.Closed)
 			{
 				RadioReceiver.Clear();
diff --git a/Sandbox.Game/Sandbox/Game/Entities/Cube/MyGridClipboard.cs b/Sandbox.Game/Sandbox/Game/Entities/Cube/MyGridClipboard.cs
index 27d8fb6f..c3016485 100644
--- a/Sandbox.Game/Sandbox/Game/Entities/Cube/MyGridClipboard.cs
+++ b/Sandbox.Game/Sandbox/Game/Entities/Cube/MyGridClipboard.cs
@@ -520,7 +520,7 @@ public class MyGridClipboard
 		{
 			action?.Invoke(this, afterPaste);
 		}
-		if (MyClipboardComponent.Static.Clipboard == this)
+		if (MyClipboardComponent.Static?.Clipboard == this)
 		{
 			if (MyCoordinateSystem.Static != null)
 			{
diff --git a/Sandbox.Game/Sandbox/Game/Entities/Cube/MyGridShape.cs b/Sandbox.Game/Sandbox/Game/Entities/Cube/MyGridShape.cs
index 5613734c..10ea397f 100644
--- a/Sandbox.Game/Sandbox/Game/Entities/Cube/MyGridShape.cs
+++ b/Sandbox.Game/Sandbox/Game/Entities/Cube/MyGridShape.cs
@@ -175,13 +175,15 @@ public class MyGridShape : IDisposable
 
 	private void AddShapesFromCollector()
 	{
+		var shapes = new HkShape[255];
+
 		int num = 0;
 		for (int i = 0; i < m_blockCollector.ShapeInfos.Count; i++)
 		{
 			MyCubeBlockCollector.ShapeInfo shapeInfo = m_blockCollector.ShapeInfos[i];
 			HkShape[] obj = null;
 			Span<HkShape> span = default(Span<HkShape>);
-			span = ((shapeInfo.Count >= 256) ? ((Span<HkShape>)(obj = new HkShape[shapeInfo.Count])) : stackalloc HkShape[shapeInfo.Count]);
+			span = shapeInfo.Count >= 256 ? (Span<HkShape>)(obj = new HkShape[shapeInfo.Count]) : shapes.AsSpan(0, shapeInfo.Count);
 			for (int j = 0; j < shapeInfo.Count; j++)
 			{
 				span[j] = m_blockCollector.Shapes[num + j];
diff --git a/Sandbox.Game/Sandbox/Game/Entities/Cube/MySlimBlock.cs b/Sandbox.Game/Sandbox/Game/Entities/Cube/MySlimBlock.cs
index de11641b..00038321 100644
--- a/Sandbox.Game/Sandbox/Game/Entities/Cube/MySlimBlock.cs
+++ b/Sandbox.Game/Sandbox/Game/Entities/Cube/MySlimBlock.cs
@@ -778,13 +778,13 @@ public class MySlimBlock : IMyDestroyableObject, IMyDecalProxy, VRage.Game.ModAP
 		[MethodImpl(MethodImplOptions.AggressiveInlining)]
 		public virtual void Set(ref MySlimBlock owner, in float value)
 		{
-			owner.VRage_002EGame_002EModAPI_002EIMySlimBlock_002EDithering = value;
+			owner.Dithering = value;
 		}
 
 		[MethodImpl(MethodImplOptions.AggressiveInlining)]
 		public virtual void Get(ref MySlimBlock owner, out float value)
 		{
-			value = owner.VRage_002EGame_002EModAPI_002EIMySlimBlock_002EDithering;
+			value = owner.Dithering;
 		}
 	}
 
@@ -793,13 +793,13 @@ public class MySlimBlock : IMyDestroyableObject, IMyDecalProxy, VRage.Game.ModAP
 		[MethodImpl(MethodImplOptions.AggressiveInlining)]
 		public virtual void Set(ref MySlimBlock owner, in float value)
 		{
-			owner.VRage_002EGame_002EModAPI_002EIMySlimBlock_002EBlockGeneralDamageModifier = value;
+			owner.BlockGeneralDamageModifier = value;
 		}
 
 		[MethodImpl(MethodImplOptions.AggressiveInlining)]
 		public virtual void Get(ref MySlimBlock owner, out float value)
 		{
-			value = owner.VRage_002EGame_002EModAPI_002EIMySlimBlock_002EBlockGeneralDamageModifier;
+			value = owner.BlockGeneralDamageModifier;
 		}
 	}
 
diff --git a/Sandbox.Game/Sandbox/Game/Entities/MyCubeBuilder.cs b/Sandbox.Game/Sandbox/Game/Entities/MyCubeBuilder.cs
index ff48ea13..2a4f3153 100644
--- a/Sandbox.Game/Sandbox/Game/Entities/MyCubeBuilder.cs
+++ b/Sandbox.Game/Sandbox/Game/Entities/MyCubeBuilder.cs
@@ -63,7 +63,7 @@ namespace Sandbox.Game.Entities;
 public class MyCubeBuilder : MyBlockBuilderBase, IMyFocusHolder, IMyCubeBuilder
 {
 	[Serializable]
-	private struct BuildData
+	protected struct BuildData
 	{
 		private class Sandbox_Game_Entities_MyCubeBuilder_003C_003EBuildData_003C_003EPosition_003C_003EAccessor : IMemberAccessor<BuildData, Vector3D>
 		{
@@ -146,7 +146,7 @@ public class MyCubeBuilder : MyBlockBuilderBase, IMyFocusHolder, IMyCubeBuilder
 	}
 
 	[Serializable]
-	private struct Author
+	protected struct Author
 	{
 		private class Sandbox_Game_Entities_MyCubeBuilder_003C_003EAuthor_003C_003EEntityId_003C_003EAccessor : IMemberAccessor<Author, long>
 		{
@@ -190,7 +190,7 @@ public class MyCubeBuilder : MyBlockBuilderBase, IMyFocusHolder, IMyCubeBuilder
 	}
 
 	[Serializable]
-	private struct GridSpawnRequestData
+	protected struct GridSpawnRequestData
 	{
 		private class Sandbox_Game_Entities_MyCubeBuilder_003C_003EGridSpawnRequestData_003C_003EAuthor_003C_003EAccessor : IMemberAccessor<GridSpawnRequestData, Author>
 		{
diff --git a/Sandbox.Game/Sandbox/Game/Entities/MyCubeGrid.cs b/Sandbox.Game/Sandbox/Game/Entities/MyCubeGrid.cs
index 625dee1f..522d5bcc 100644
--- a/Sandbox.Game/Sandbox/Game/Entities/MyCubeGrid.cs
+++ b/Sandbox.Game/Sandbox/Game/Entities/MyCubeGrid.cs
@@ -127,7 +127,7 @@ public class MyCubeGrid : MyEntity, IMyGridConnectivityTest, IMyEventProxy, IMyE
 		SplitBlock
 	}
 
-	internal enum MyTestDynamicReason
+	protected internal enum MyTestDynamicReason
 	{
 		NoReason,
 		GridCopied,
diff --git a/Sandbox.Game/Sandbox/Game/Entities/MyReactor.cs b/Sandbox.Game/Sandbox/Game/Entities/MyReactor.cs
index 4dddecc1..f6f26a60 100644
--- a/Sandbox.Game/Sandbox/Game/Entities/MyReactor.cs
+++ b/Sandbox.Game/Sandbox/Game/Entities/MyReactor.cs
@@ -411,15 +411,7 @@ public class MyReactor : MyFueledPowerProducer, IMyConveyorEndpointBlock, Sandbo
 		};
 	}
 
-	[SpecialName]
-	int IMyInventoryOwner.get_InventoryCount()
-	{
-		return base.InventoryCount;
-	}
+	[SpecialName] int IMyInventoryOwner.InventoryCount => base.InventoryCount;
 
-	[SpecialName]
-	bool IMyInventoryOwner.get_HasInventory()
-	{
-		return base.HasInventory;
-	}
+	[SpecialName] bool IMyInventoryOwner.HasInventory => base.HasInventory;
 }
diff --git a/Sandbox.Game/Sandbox/Game/Entities/MySphericalNaturalGravityComponent.cs b/Sandbox.Game/Sandbox/Game/Entities/MySphericalNaturalGravityComponent.cs
index c9471037..69f84e6a 100644
--- a/Sandbox.Game/Sandbox/Game/Entities/MySphericalNaturalGravityComponent.cs
+++ b/Sandbox.Game/Sandbox/Game/Entities/MySphericalNaturalGravityComponent.cs
@@ -24,7 +24,7 @@ public class MySphericalNaturalGravityComponent : MyGravityProviderComponent, IM
 
 	private float m_gravityLimitSq;
 
-	public Vector3D Position { get; private set; }
+	public Vector3D Position { get; internal set; }
 
 	Vector3D IMyNaturalGravityComponent.Position
 	{
diff --git a/Sandbox.Game/Sandbox/Game/Entities/MyVoxelBase.cs b/Sandbox.Game/Sandbox/Game/Entities/MyVoxelBase.cs
index 8a1e966b..2cf56ca2 100644
--- a/Sandbox.Game/Sandbox/Game/Entities/MyVoxelBase.cs
+++ b/Sandbox.Game/Sandbox/Game/Entities/MyVoxelBase.cs
@@ -33,7 +33,7 @@ namespace Sandbox.Game.Entities;
 public abstract class MyVoxelBase : MyEntity, IMyVoxelDrawable, IMyVoxelBase, VRage.ModAPI.IMyEntity, VRage.Game.ModAPI.Ingame.IMyEntity, IMyDecalProxy, IMyEventProxy, IMyEventOwner
 {
 	[Serializable]
-	private struct MyRampShapeParams
+	protected struct MyRampShapeParams
 	{
 		private class Sandbox_Game_Entities_MyVoxelBase_003C_003EMyRampShapeParams_003C_003EBox_003C_003EAccessor : IMemberAccessor<MyRampShapeParams, BoundingBoxD>
 		{
@@ -122,7 +122,7 @@ public abstract class MyVoxelBase : MyEntity, IMyVoxelDrawable, IMyVoxelBase, VR
 	}
 
 	[Serializable]
-	private struct MyCapsuleShapeParams
+	protected struct MyCapsuleShapeParams
 	{
 		private class Sandbox_Game_Entities_MyVoxelBase_003C_003EMyCapsuleShapeParams_003C_003EA_003C_003EAccessor : IMemberAccessor<MyCapsuleShapeParams, Vector3D>
 		{
diff --git a/Sandbox.Game/Sandbox/Game/GameSystems/Chat/MyChatCommandSystem.cs b/Sandbox.Game/Sandbox/Game/GameSystems/Chat/MyChatCommandSystem.cs
index 5a453076..212bb3ca 100644
--- a/Sandbox.Game/Sandbox/Game/GameSystems/Chat/MyChatCommandSystem.cs
+++ b/Sandbox.Game/Sandbox/Game/GameSystems/Chat/MyChatCommandSystem.cs
@@ -4,6 +4,7 @@ using System.Linq;
 using System.Reflection;
 using System.Text.RegularExpressions;
 using VRage.Utils;
+using MethodInfoExtensions = System.MethodInfoExtensions;
 
 namespace Sandbox.Game.GameSystems.Chat;
 
diff --git a/Sandbox.Game/Sandbox/Game/GameSystems/CoordinateSystem/MyCoordinateSystem.cs b/Sandbox.Game/Sandbox/Game/GameSystems/CoordinateSystem/MyCoordinateSystem.cs
index 59571c87..cf4c525c 100644
--- a/Sandbox.Game/Sandbox/Game/GameSystems/CoordinateSystem/MyCoordinateSystem.cs
+++ b/Sandbox.Game/Sandbox/Game/GameSystems/CoordinateSystem/MyCoordinateSystem.cs
@@ -25,7 +25,7 @@ public class MyCoordinateSystem : MySessionComponentBase
 	/// Used for transporting information about coord system to clients.
 	/// </summary>
 	[Serializable]
-	private struct MyCreateCoordSysBuffer
+	protected struct MyCreateCoordSysBuffer
 	{
 		private class Sandbox_Game_GameSystems_CoordinateSystem_MyCoordinateSystem_003C_003EMyCreateCoordSysBuffer_003C_003EId_003C_003EAccessor : IMemberAccessor<MyCreateCoordSysBuffer, long>
 		{
diff --git a/Sandbox.Game/Sandbox/Game/GameSystems/MyHeightMapLoadingSystem.cs b/Sandbox.Game/Sandbox/Game/GameSystems/MyHeightMapLoadingSystem.cs
index cd2d35d8..a80fb161 100644
--- a/Sandbox.Game/Sandbox/Game/GameSystems/MyHeightMapLoadingSystem.cs
+++ b/Sandbox.Game/Sandbox/Game/GameSystems/MyHeightMapLoadingSystem.cs
@@ -76,6 +76,10 @@ public class MyHeightMapLoadingSystem : MySessionComponentBase
 
 	private void Release<T>(string path, Dictionary<string, int> counter, ConcurrentDictionary<string, T> maps, Action<T> dispose)
 	{
+		// The maps can already be set to null during unload
+		if (maps == null)
+			return;
+
 		lock (counter)
 		{
 			counter.TryGetValue(path, out var value);
diff --git a/Sandbox.Game/Sandbox/Game/GameSystems/MyShipMiningSystem.cs b/Sandbox.Game/Sandbox/Game/GameSystems/MyShipMiningSystem.cs
index ee6de9f5..b8dded4b 100644
--- a/Sandbox.Game/Sandbox/Game/GameSystems/MyShipMiningSystem.cs
+++ b/Sandbox.Game/Sandbox/Game/GameSystems/MyShipMiningSystem.cs
@@ -393,7 +393,9 @@ public class MyShipMiningSystem : MyUpdateableGridSystem
 			IsClient = false;
 			m_storage = target.Storage;
 			m_targetVoxel = target;
-			MatrixD.Multiply(ref Unsafe.AsRef(in system.Grid.PositionComp.WorldMatrixRef), ref Unsafe.AsRef(in target.PositionComp.WorldMatrixInvScaled), out var result);
+			var systemWorldMatrix = system.Grid.PositionComp.WorldMatrixRef;
+			var targetWorldMatrixInvScaled = target.PositionComp.WorldMatrixInvScaled;
+			MatrixD.Multiply(ref systemWorldMatrix, ref targetWorldMatrixInvScaled, out var result);
 			result.Translation += target.StorageMin + target.SizeInMetresHalf;
 			Vector3 center = cluster.Bounds.Center;
 			m_storageOffset = Vector3I.Floor(Vector3D.Transform(center, ref result));
diff --git a/Sandbox.Game/Sandbox/Game/Gui/MyGuiScreenAdminMenu.cs b/Sandbox.Game/Sandbox/Game/Gui/MyGuiScreenAdminMenu.cs
index 967cd948..54658380 100644
--- a/Sandbox.Game/Sandbox/Game/Gui/MyGuiScreenAdminMenu.cs
+++ b/Sandbox.Game/Sandbox/Game/Gui/MyGuiScreenAdminMenu.cs
@@ -85,7 +85,7 @@ public class MyGuiScreenAdminMenu : MyGuiScreenDebugBase
 	}
 
 	[Serializable]
-	internal struct AdminSettings
+	protected internal struct AdminSettings
 	{
 		private class Sandbox_Game_Gui_MyGuiScreenAdminMenu_003C_003EAdminSettings_003C_003EFlags_003C_003EAccessor : IMemberAccessor<AdminSettings, MyTrashRemovalFlags>
 		{
diff --git a/Sandbox.Game/Sandbox/Game/Gui/MyGuiScreenDebugNetwork.cs b/Sandbox.Game/Sandbox/Game/Gui/MyGuiScreenDebugNetwork.cs
index 3e28edc5..8c43a067 100644
--- a/Sandbox.Game/Sandbox/Game/Gui/MyGuiScreenDebugNetwork.cs
+++ b/Sandbox.Game/Sandbox/Game/Gui/MyGuiScreenDebugNetwork.cs
@@ -58,7 +58,7 @@ internal class MyGuiScreenDebugNetwork : MyGuiScreenDebugBase
 	}
 
 	[Serializable]
-	private struct Layer
+	protected struct Layer
 	{
 		[Serializable]
 		public struct Entity
diff --git a/Sandbox.Game/Sandbox/Game/Gui/MyTerminalInfoController.cs b/Sandbox.Game/Sandbox/Game/Gui/MyTerminalInfoController.cs
index f5c6cfac..eb22a1b1 100644
--- a/Sandbox.Game/Sandbox/Game/Gui/MyTerminalInfoController.cs
+++ b/Sandbox.Game/Sandbox/Game/Gui/MyTerminalInfoController.cs
@@ -35,7 +35,7 @@ namespace Sandbox.Game.Gui;
 internal class MyTerminalInfoController : MyTerminalController
 {
 	[Serializable]
-	private struct GridBuiltByIdInfo
+	protected struct GridBuiltByIdInfo
 	{
 		private class Sandbox_Game_Gui_MyTerminalInfoController_003C_003EGridBuiltByIdInfo_003C_003EGridName_003C_003EAccessor : IMemberAccessor<GridBuiltByIdInfo, string>
 		{
diff --git a/Sandbox.Game/Sandbox/Game/Multiplayer/MyGpsCollection.cs b/Sandbox.Game/Sandbox/Game/Multiplayer/MyGpsCollection.cs
index d64ee714..2aa46eb0 100644
--- a/Sandbox.Game/Sandbox/Game/Multiplayer/MyGpsCollection.cs
+++ b/Sandbox.Game/Sandbox/Game/Multiplayer/MyGpsCollection.cs
@@ -30,7 +30,7 @@ namespace Sandbox.Game.Multiplayer;
 public class MyGpsCollection : IMyGpsCollection
 {
 	[Serializable]
-	private struct AddMsg
+	protected struct AddMsg
 	{
 		private class Sandbox_Game_Multiplayer_MyGpsCollection_003C_003EAddMsg_003C_003EIdentityId_003C_003EAccessor : IMemberAccessor<AddMsg, long>
 		{
@@ -292,7 +292,7 @@ public class MyGpsCollection : IMyGpsCollection
 	}
 
 	[Serializable]
-	private struct ModifyMsg
+	protected struct ModifyMsg
 	{
 		private class Sandbox_Game_Multiplayer_MyGpsCollection_003C_003EModifyMsg_003C_003EIdentityId_003C_003EAccessor : IMemberAccessor<ModifyMsg, long>
 		{
diff --git a/Sandbox.Game/Sandbox/Game/Replication/StateGroups/MyPropertySyncStateGroup.cs b/Sandbox.Game/Sandbox/Game/Replication/StateGroups/MyPropertySyncStateGroup.cs
index f8cc3e2d..59482849 100644
--- a/Sandbox.Game/Sandbox/Game/Replication/StateGroups/MyPropertySyncStateGroup.cs
+++ b/Sandbox.Game/Sandbox/Game/Replication/StateGroups/MyPropertySyncStateGroup.cs
@@ -131,7 +131,7 @@ public sealed class MyPropertySyncStateGroup : IMyStateGroup, IMyNetObject, IMyE
 		syncType.PropertyCountChanged += OnPropertyCountChanged;
 		m_properties = syncType.Properties;
 		m_propertyTimestamps = new List<MyTimeSpan>(m_properties.Count);
-		if (Sync.IsServer)
+		if (Sync.IsServer && MyMultiplayer.Static != null)
 		{
 			for (int num = 0; num < m_properties.Count; num++)
 			{
diff --git a/Sandbox.Game/Sandbox/Game/Screens/MyFilterBool.cs b/Sandbox.Game/Sandbox/Game/Screens/MyFilterBool.cs
index 820fff26..11092845 100644
--- a/Sandbox.Game/Sandbox/Game/Screens/MyFilterBool.cs
+++ b/Sandbox.Game/Sandbox/Game/Screens/MyFilterBool.cs
@@ -16,7 +16,6 @@ public class MyFilterBool : IMyFilterOption
 				true => CheckStateEnum.Checked, 
 				false => CheckStateEnum.Unchecked, 
 				null => CheckStateEnum.Indeterminate, 
-				_ => throw new InvalidBranchException(), 
 			};
 		}
 		set
@@ -43,7 +42,6 @@ public class MyFilterBool : IMyFilterOption
 		false => "0", 
 		true => "1", 
 		null => "2", 
-		_ => throw new InvalidBranchException(), 
 	};
 
 	public MyFilterBool(bool? value = null)
diff --git a/Sandbox.Game/Sandbox/Game/Screens/MyGuiScreenMainMenuBase.cs b/Sandbox.Game/Sandbox/Game/Screens/MyGuiScreenMainMenuBase.cs
index eb1cf985..cbb96da4 100644
--- a/Sandbox.Game/Sandbox/Game/Screens/MyGuiScreenMainMenuBase.cs
+++ b/Sandbox.Game/Sandbox/Game/Screens/MyGuiScreenMainMenuBase.cs
@@ -2,6 +2,7 @@ using System;
 using System.Collections.Generic;
 using System.Globalization;
 using System.Net;
+using System.Runtime.InteropServices;
 using System.Text;
 using Sandbox.Engine.Analytics;
 using Sandbox.Engine.Networking;
@@ -265,7 +266,7 @@ public abstract class MyGuiScreenMainMenuBase : MyGuiScreenBase
 			MyGuiManager.DrawString("BuildInfoHighlight", BranchName.ToString(), normalizedCoord, 0.6f, new Color(MyGuiConstants.LABEL_TEXT_COLOR * m_transitionAlpha, 0.6f), MyGuiDrawAlignEnum.HORISONTAL_RIGHT_AND_VERTICAL_BOTTOM);
 			normalizedCoord.X -= zero.X;
 		}
-		string text = MyFinalBuildConstants.APP_VERSION_STRING_DOTS.ToString() + $" b{MyPerGameSettings.BasicGameInfo.ClientBuildNumber}";
+		string text = MyFinalBuildConstants.APP_VERSION_STRING_DOTS.ToString() + $" b{MyPerGameSettings.BasicGameInfo.ClientBuildNumber} on {RuntimeInformation.FrameworkDescription}";
 		MyGuiManager.DrawString("BuildInfo", text, normalizedCoord, 0.6f, new Color(MyGuiConstants.LABEL_TEXT_COLOR * m_transitionAlpha, 0.6f), MyGuiDrawAlignEnum.HORISONTAL_RIGHT_AND_VERTICAL_BOTTOM);
 	}
 
diff --git a/Sandbox.Game/Sandbox/Game/Screens/MyGuiScreenSimpleNewGame.cs b/Sandbox.Game/Sandbox/Game/Screens/MyGuiScreenSimpleNewGame.cs
index b539e776..b4cf1f87 100644
--- a/Sandbox.Game/Sandbox/Game/Screens/MyGuiScreenSimpleNewGame.cs
+++ b/Sandbox.Game/Sandbox/Game/Screens/MyGuiScreenSimpleNewGame.cs
@@ -718,7 +718,7 @@ public sealed class MyGuiScreenSimpleNewGame : MyGuiScreenBase
 		MyCampaignManager.Static.SwitchCampaign(scenario.Name, scenario.IsVanilla, scenario.PublishedFileId, scenario.PublishedServiceName, scenario.ModFolderPath, MyPlatformGameSettings.CONSOLE_COMPATIBLE);
 		if (!preferOnline || !MyGameService.IsActive)
 		{
-			Run(granted: false);
+			Run(false);
 			return;
 		}
 		bool granted = false;
diff --git a/Sandbox.Game/Sandbox/Game/SessionComponents/MyHighlightSystem.cs b/Sandbox.Game/Sandbox/Game/SessionComponents/MyHighlightSystem.cs
index b4bca5d3..68f3bd6b 100644
--- a/Sandbox.Game/Sandbox/Game/SessionComponents/MyHighlightSystem.cs
+++ b/Sandbox.Game/Sandbox/Game/SessionComponents/MyHighlightSystem.cs
@@ -54,12 +54,15 @@ public class MyHighlightSystem : MySessionComponentBase
 
 		public override int GetHashCode()
 		{
-			return (-1285426570 * -1521134295 + EntityId.GetHashCode()) * -1521134295 + EqualityComparer<string>.Default.GetHashCode(SectionName);
+			unchecked
+			{
+				return (-1285426570 * -1521134295 + EntityId.GetHashCode()) * -1521134295 + EqualityComparer<string>.Default.GetHashCode(SectionName);
+			}
 		}
 	}
 
 	[Serializable]
-	private struct HighlightMsg
+	protected struct HighlightMsg
 	{
 		private class Sandbox_Game_SessionComponents_MyHighlightSystem_003C_003EHighlightMsg_003C_003EData_003C_003EAccessor : IMemberAccessor<HighlightMsg, MyHighlightData>
 		{
diff --git a/Sandbox.Game/Sandbox/Game/Weapons/MyShipDrill.cs b/Sandbox.Game/Sandbox/Game/Weapons/MyShipDrill.cs
index 2b83cede..13b2c83b 100644
--- a/Sandbox.Game/Sandbox/Game/Weapons/MyShipDrill.cs
+++ b/Sandbox.Game/Sandbox/Game/Weapons/MyShipDrill.cs
@@ -974,15 +974,7 @@ public class MyShipDrill : MyFunctionalBlock, IMyGunObject<MyToolBase>, IMyInven
 		return true;
 	}
 
-	[SpecialName]
-	int IMyInventoryOwner.get_InventoryCount()
-	{
-		return base.InventoryCount;
-	}
+	[SpecialName] int IMyInventoryOwner.InventoryCount => base.InventoryCount;
 
-	[SpecialName]
-	bool IMyInventoryOwner.get_HasInventory()
-	{
-		return base.HasInventory;
-	}
+	[SpecialName] bool IMyInventoryOwner.HasInventory => base.HasInventory;
 }
diff --git a/Sandbox.Game/Sandbox/Game/World/MyBlockLimits.cs b/Sandbox.Game/Sandbox/Game/World/MyBlockLimits.cs
index 34f04d62..929514b8 100644
--- a/Sandbox.Game/Sandbox/Game/World/MyBlockLimits.cs
+++ b/Sandbox.Game/Sandbox/Game/World/MyBlockLimits.cs
@@ -191,7 +191,7 @@ public class MyBlockLimits
 	}
 
 	[Serializable]
-	private struct TransferMessageData
+	protected struct TransferMessageData
 	{
 		private class Sandbox_Game_World_MyBlockLimits_003C_003ETransferMessageData_003C_003EEntityId_003C_003EAccessor : IMemberAccessor<TransferMessageData, long>
 		{
diff --git a/Sandbox.Game/Sandbox/MyCommonProgramStartup.cs b/Sandbox.Game/Sandbox/MyCommonProgramStartup.cs
index bf2515fd..c10c8ebb 100644
--- a/Sandbox.Game/Sandbox/MyCommonProgramStartup.cs
+++ b/Sandbox.Game/Sandbox/MyCommonProgramStartup.cs
@@ -20,6 +20,7 @@ using VRage.GameServices;
 using VRage.Library.Utils;
 using VRage.Utils;
 using VRageMath;
+using AssemblyExtensions = VRage.AssemblyExtensions;
 
 namespace Sandbox;
 
diff --git a/Sandbox.Game/Sandbox/MyInitializer.cs b/Sandbox.Game/Sandbox/MyInitializer.cs
index cbba6db0..6ce73887 100644
--- a/Sandbox.Game/Sandbox/MyInitializer.cs
+++ b/Sandbox.Game/Sandbox/MyInitializer.cs
@@ -102,10 +102,7 @@ public static class MyInitializer
 	public static void InvokeBeforeRun(uint appId, string appName, string rootPath, string userDataPath, bool addDateToLog = false, int maxLogAge = -1, Action onConfigChangedCallback = null, string modsCachePath = null)
 	{
 		m_appName = appName;
-		if (!string.IsNullOrEmpty(rootPath))
-		{
-			MyFileSystem.RootPath = rootPath;
-		}
+
 		InitFileSystem(userDataPath, modsCachePath);
 		MyLog log = MySandboxGame.Log;
 		if (log is MyLogKeen myLogKeen)
@@ -157,6 +154,8 @@ public static class MyInitializer
 		{
 			Thread.CurrentThread.Name = "Main thread";
 		}
+
+#if !DEBUG
 		IMySimplifiedErrorReporter simplifiedErrorReporter = ErrorPlatform.TryToCreateSimplifiedErrorReporter(MyLog.Default);
 		if (simplifiedErrorReporter != null)
 		{
@@ -168,8 +167,11 @@ public static class MyInitializer
 		{
 			ProcessUnhandledException(new MyNativeException(), x);
 		});
+#endif
+
 		Thread.CurrentThread.CurrentCulture = CultureInfo.InvariantCulture;
 		Thread.CurrentThread.CurrentUICulture = CultureInfo.InvariantCulture;
+
 		if (MyFakes.ENABLE_MINIDUMP_SENDING && MyFileSystem.IsInitialized)
 		{
 			if (MyFakes.COLLECT_SUSPEND_DUMPS)
@@ -178,6 +180,8 @@ public static class MyInitializer
 			}
 			MyMiniDump.CleanupOldDumps();
 		}
+
+#if !DEBUG
 		ErrorPlatform.CleanupCrashAnalytics();
 		MyErrorReporter.UpdateHangAnalytics();
 		void UnhandledManagedException(object sender, UnhandledExceptionEventArgs args)
@@ -193,6 +197,7 @@ public static class MyInitializer
 				}
 			}
 		}
+#endif
 	}
 
 	public static void InvokeAfterRun()
diff --git a/Sandbox.Game/Sandbox/MySandboxGame.cs b/Sandbox.Game/Sandbox/MySandboxGame.cs
index ed390a80..bc668c33 100644
--- a/Sandbox.Game/Sandbox/MySandboxGame.cs
+++ b/Sandbox.Game/Sandbox/MySandboxGame.cs
@@ -1885,6 +1885,7 @@ public class MySandboxGame : Sandbox.Engine.Platform.Game, IDisposable
 	{
 		bool flag = true;
 		Log.WriteLine("MySandboxGame.Initialize() - START");
+		ReplicatedTypes.Load();
 		Log.IncreaseIndent();
 		Log.WriteLine("Installed DLCs: ");
 		Log.IncreaseIndent();
@@ -2408,24 +2409,29 @@ public class MySandboxGame : Sandbox.Engine.Platform.Game, IDisposable
 
 	private void InitModAPI()
 	{
+#if !DEBUG
 		try
 		{
+#endif
 			if (MyVRage.Platform.Scripting.IsRuntimeCompilationSupported)
 			{
 				InitIlCompiler();
 				InitIlChecker();
 			}
+#if !DEBUG
 		}
 		catch (Exception ex)
 		{
 			Log.Error("Error during ModAPI initialization: {0}", ex.Message);
 			ShowHotfixPopup = true;
 		}
+#endif
 	}
 
 	private static void OnDotNetHotfixPopupClosed(MyGuiScreenMessageBox.ResultEnum result)
 	{
-		Process.Start("https://support.microsoft.com/kb/3120241");
+		// This would fail with System.ComponentModel.Win32Exception: The system cannot find the file specified
+		//Process.Start("https://support.microsoft.com/kb/3120241");
 		ClosePopup(result);
 	}
 
diff --git a/Sandbox.Game/app.config b/Sandbox.Game/app.config
deleted file mode 100644
index b42e1b43..00000000
--- a/Sandbox.Game/app.config
+++ /dev/null
@@ -1,27 +0,0 @@
-﻿<?xml version="1.0" encoding="utf-8"?>
-<configuration>
-  <configSections>
-    
-    <section name="entityFramework" type="System.Data.Entity.Internal.ConfigFile.EntityFrameworkSection, EntityFramework, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" requirePermission="false" />
-  </configSections>
-  
-  <entityFramework>
-    <defaultConnectionFactory type="System.Data.Entity.Infrastructure.LocalDbConnectionFactory, EntityFramework">
-      <parameters>
-        <parameter value="v12.0" />
-      </parameters>
-    </defaultConnectionFactory>
-    <providers>
-      <provider invariantName="System.Data.SqlClient" type="System.Data.Entity.SqlServer.SqlProviderServices, EntityFramework.SqlServer" />
-      <provider invariantName="System.Data.SQLite.EF6" type="System.Data.SQLite.EF6.SQLiteProviderServices, System.Data.SQLite.EF6" />
-    </providers>
-  </entityFramework>
-  <runtime>
-    <assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">
-      <dependentAssembly>
-        <assemblyIdentity name="System.Data.SQLite" publicKeyToken="db937bc2d44ff139" culture="neutral" />
-        <bindingRedirect oldVersion="0.0.0.0-1.0.104.0" newVersion="1.0.104.0" />
-      </dependentAssembly>
-    </assemblyBinding>
-  </runtime>
-</configuration>
\ No newline at end of file
diff --git a/SpaceEngineers.Game/Sandbox/Game/Screens/MyGuiScreenNewGameScenarioSelection.cs b/SpaceEngineers.Game/Sandbox/Game/Screens/MyGuiScreenNewGameScenarioSelection.cs
index 0d6742de..ec58eee9 100644
--- a/SpaceEngineers.Game/Sandbox/Game/Screens/MyGuiScreenNewGameScenarioSelection.cs
+++ b/SpaceEngineers.Game/Sandbox/Game/Screens/MyGuiScreenNewGameScenarioSelection.cs
@@ -1734,7 +1734,7 @@ public sealed class MyGuiScreenNewGameScenarioSelection : MyGuiScreenBase
 		MyCampaignManager.Static.SwitchCampaign(scenario.Name, scenario.IsVanilla, scenario.PublishedFileId, scenario.PublishedServiceName, scenario.ModFolderPath, MyPlatformGameSettings.CONSOLE_COMPATIBLE);
 		if (!preferOnline || !MyGameService.IsActive)
 		{
-			Run(granted: false);
+			Run(false);
 			return;
 		}
 		bool granted = false;
diff --git a/SpaceEngineers.Game/Sandbox/Game/Screens/MyGuiScreenScenarioSelectionCustomizeScreen.cs b/SpaceEngineers.Game/Sandbox/Game/Screens/MyGuiScreenScenarioSelectionCustomizeScreen.cs
index 5e4ae22e..d4e6d919 100644
--- a/SpaceEngineers.Game/Sandbox/Game/Screens/MyGuiScreenScenarioSelectionCustomizeScreen.cs
+++ b/SpaceEngineers.Game/Sandbox/Game/Screens/MyGuiScreenScenarioSelectionCustomizeScreen.cs
@@ -1545,7 +1545,7 @@ public class MyGuiScreenScenarioSelectionCustomizeScreen : MyGuiScreenBase
 		MyCampaignManager.Static.SwitchCampaign(scenario.Name, scenario.IsVanilla, scenario.PublishedFileId, scenario.PublishedServiceName, scenario.ModFolderPath, MyPlatformGameSettings.CONSOLE_COMPATIBLE);
 		if (!preferOnline || !MyGameService.IsActive)
 		{
-			Run(granted: false);
+			Run(false);
 			return;
 		}
 		bool granted = false;
diff --git a/SpaceEngineers.Game/SpaceEngineers.Game.csproj b/SpaceEngineers.Game/SpaceEngineers.Game.csproj
index cf005c88..4b572a01 100644
--- a/SpaceEngineers.Game/SpaceEngineers.Game.csproj
+++ b/SpaceEngineers.Game/SpaceEngineers.Game.csproj
@@ -16,16 +16,23 @@
     <PackageReference Include="System.Memory" Version="4.5.5" />
     <PackageReference Include="System.Runtime.CompilerServices.Unsafe" Version="6.0.0" />
     <ProjectReference Include="..\Sandbox.Common\Sandbox.Common.csproj" />
+    <ProjectReference Include="..\Sandbox.Game.XmlSerializers\Sandbox.Game.XmlSerializers.csproj" />
     <ProjectReference Include="..\Sandbox.Game\Sandbox.Game.csproj" />
     <ProjectReference Include="..\Sandbox.Graphics\Sandbox.Graphics.csproj" />
     <ProjectReference Include="..\Sandbox.RenderDirect\Sandbox.RenderDirect.csproj" />
+    <ProjectReference Include="..\SpaceEngineers.ObjectBuilders.XmlSerializers\SpaceEngineers.ObjectBuilders.XmlSerializers.csproj" />
     <ProjectReference Include="..\SpaceEngineers.ObjectBuilders\SpaceEngineers.ObjectBuilders.csproj" />
+    <ProjectReference Include="..\VRage.EOS.XmlSerializers\VRage.EOS.XmlSerializers.csproj" />
+    <ProjectReference Include="..\VRage.Game.XmlSerializers\VRage.Game.XmlSerializers.csproj" />
     <ProjectReference Include="..\VRage.Game\VRage.Game.csproj" />
     <ProjectReference Include="..\VRage.Input\VRage.Input.csproj" />
     <ProjectReference Include="..\VRage.Library\VRage.Library.csproj" />
+    <ProjectReference Include="..\VRage.Math.XmlSerializers\VRage.Math.XmlSerializers.csproj" />
     <ProjectReference Include="..\VRage.Math\VRage.Math.csproj" />
     <ProjectReference Include="..\VRage.Network\VRage.Network.csproj" />
     <ProjectReference Include="..\VRage.Render\VRage.Render.csproj" />
+    <ProjectReference Include="..\VRage.Scripting\VRage.Scripting.csproj" />
+    <ProjectReference Include="..\VRage.XmlSerializers\VRage.XmlSerializers.csproj" />
     <ProjectReference Include="..\VRage\VRage.csproj" />
     <Reference Include="EmptyKeys.UserInterface">
       <HintPath>../Bin64/EmptyKeys.UserInterface.dll</HintPath>
diff --git a/SpaceEngineers.Game/SpaceEngineers/Game/Entities/Blocks/MyFlightMovementBlock.cs b/SpaceEngineers.Game/SpaceEngineers/Game/Entities/Blocks/MyFlightMovementBlock.cs
index 413b8d6e..f19f617f 100644
--- a/SpaceEngineers.Game/SpaceEngineers/Game/Entities/Blocks/MyFlightMovementBlock.cs
+++ b/SpaceEngineers.Game/SpaceEngineers/Game/Entities/Blocks/MyFlightMovementBlock.cs
@@ -1589,9 +1589,5 @@ public sealed class MyFlightMovementBlock : MyFunctionalBlock, IMyComponentOwner
 		UpdateDetailedInfo();
 	}
 
-	[SpecialName]
-	MyCubeGrid IMyShipControl.get_CubeGrid()
-	{
-		return base.CubeGrid;
-	}
+	[SpecialName] MyCubeGrid IMyShipControl.CubeGrid => base.CubeGrid;
 }
diff --git a/SpaceEngineers.Game/SpaceEngineers/Game/GUI/MyGuiScreenMedicals.cs b/SpaceEngineers.Game/SpaceEngineers/Game/GUI/MyGuiScreenMedicals.cs
index 6187e776..bb64addf 100644
--- a/SpaceEngineers.Game/SpaceEngineers/Game/GUI/MyGuiScreenMedicals.cs
+++ b/SpaceEngineers.Game/SpaceEngineers/Game/GUI/MyGuiScreenMedicals.cs
@@ -44,7 +44,7 @@ namespace SpaceEngineers.Game.GUI;
 public class MyGuiScreenMedicals : MyGuiScreenBase
 {
 	[Serializable]
-	private class MyPlanetInfo
+	protected class MyPlanetInfo
 	{
 		protected class SpaceEngineers_Game_GUI_MyGuiScreenMedicals_003C_003EMyPlanetInfo_003C_003EPlanetId_003C_003EAccessor : IMemberAccessor<MyPlanetInfo, long>
 		{
diff --git a/SpaceEngineers.Game/SpaceEngineers/Game/MySpaceGameCustomInitialization.cs b/SpaceEngineers.Game/SpaceEngineers/Game/MySpaceGameCustomInitialization.cs
index 904808df..6938fc7b 100644
--- a/SpaceEngineers.Game/SpaceEngineers/Game/MySpaceGameCustomInitialization.cs
+++ b/SpaceEngineers.Game/SpaceEngineers/Game/MySpaceGameCustomInitialization.cs
@@ -4,6 +4,7 @@ using System.Collections.Immutable;
 using System.IO;
 using System.Reflection;
 using System.Text.RegularExpressions;
+using System.Xml;
 using Sandbox;
 using Sandbox.Engine.Networking;
 using Sandbox.Engine.Utils;
@@ -11,7 +12,6 @@ using Sandbox.Game.EntityComponents;
 using Sandbox.ModAPI.Ingame;
 using Sandbox.ModAPI.Interfaces;
 using SpaceEngineers.Game.Definitions.SafeZone;
-using SpaceEngineers.Game.ModAPI;
 using SpaceEngineers.Game.ModAPI.Ingame;
 using VRage;
 using VRage.Collections;
@@ -38,32 +38,34 @@ public class MySpaceGameCustomInitialization : MySandboxGame.IGameCustomInitiali
 
 	public void InitIlCompiler()
 	{
-		List<string> list = new List<string>();
-		list.Add(Path.Combine(Assembly.Load("netstandard").Location));
-		list.Add(Path.Combine(MyFileSystem.ExePath, "Sandbox.Game.dll"));
-		list.Add(Path.Combine(MyFileSystem.ExePath, "Sandbox.Common.dll"));
-		list.Add(Path.Combine(MyFileSystem.ExePath, "Sandbox.Graphics.dll"));
-		list.Add(Path.Combine(MyFileSystem.ExePath, "VRage.dll"));
-		list.Add(Path.Combine(MyFileSystem.ExePath, "VRage.Library.dll"));
-		list.Add(Path.Combine(MyFileSystem.ExePath, "VRage.Math.dll"));
-		list.Add(Path.Combine(MyFileSystem.ExePath, "VRage.Game.dll"));
-		list.Add(Path.Combine(MyFileSystem.ExePath, "VRage.Render.dll"));
-		list.Add(Path.Combine(MyFileSystem.ExePath, "VRage.Input.dll"));
-		list.Add(Path.Combine(MyFileSystem.ExePath, "SpaceEngineers.ObjectBuilders.dll"));
-		list.Add(Path.Combine(MyFileSystem.ExePath, "SpaceEngineers.Game.dll"));
-		list.Add(Path.Combine(MyFileSystem.ExePath, "System.Collections.Immutable.dll"));
-		list.Add(Path.Combine(MyFileSystem.ExePath, "ProtoBuf.Net.Core.dll"));
-		List<string> list2 = list;
+		List<string> assemblyPaths = new List<string>();
+		assemblyPaths.Add(Path.Combine(Assembly.Load("netstandard").Location));
+		assemblyPaths.Add(Path.Combine(MyFileSystem.ExePath, "Sandbox.Game.dll"));
+		assemblyPaths.Add(Path.Combine(MyFileSystem.ExePath, "Sandbox.Common.dll"));
+		assemblyPaths.Add(Path.Combine(MyFileSystem.ExePath, "Sandbox.Graphics.dll"));
+		assemblyPaths.Add(Path.Combine(MyFileSystem.ExePath, "VRage.dll"));
+		assemblyPaths.Add(Path.Combine(MyFileSystem.ExePath, "VRage.Library.dll"));
+		assemblyPaths.Add(Path.Combine(MyFileSystem.ExePath, "VRage.Math.dll"));
+		assemblyPaths.Add(Path.Combine(MyFileSystem.ExePath, "VRage.Game.dll"));
+		assemblyPaths.Add(Path.Combine(MyFileSystem.ExePath, "VRage.Render.dll"));
+		assemblyPaths.Add(Path.Combine(MyFileSystem.ExePath, "VRage.Input.dll"));
+		assemblyPaths.Add(Path.Combine(MyFileSystem.ExePath, "VRage.Scripting.dll"));
+		assemblyPaths.Add(Path.Combine(MyFileSystem.ExePath, "SpaceEngineers.ObjectBuilders.dll"));
+		assemblyPaths.Add(Path.Combine(MyFileSystem.ExePath, "SpaceEngineers.Game.dll"));
+		assemblyPaths.Add(Path.Combine(MyFileSystem.ExePath, "protobuf-net.Core.dll"));
+		List<string> assemblyLocations = assemblyPaths;
+
 		Assembly[] assemblies = AppDomain.CurrentDomain.GetAssemblies();
 		foreach (Assembly assembly in assemblies)
 		{
 			string name = assembly.GetName().Name;
-			if (name == "System.Runtime" || name == "System.Collections")
+			if (name.StartsWith("System."))
 			{
-				list2.Add(assembly.Location);
+				assemblyLocations.Add(assembly.Location);
 			}
 		}
-		MyVRage.Platform.Scripting.Initialize(MySandboxGame.Static.UpdateThread, list2, new Type[14]
+
+		MyVRage.Platform.Scripting.Initialize(MySandboxGame.Static.UpdateThread, assemblyLocations, new Type[]
 		{
 			typeof(MyTuple),
 			typeof(Vector2),
@@ -77,8 +79,18 @@ public class MySpaceGameCustomInitialization : MySandboxGame.IGameCustomInitiali
 			typeof(IMyCubeBlock),
 			typeof(MyIni),
 			typeof(ImmutableArray),
-			typeof(SpaceEngineers.Game.ModAPI.Ingame.IMyAirVent),
-			typeof(MySprite)
+			typeof(IMyAirVent),
+			typeof(MySprite),
+			typeof(VRage.Scripting.MemorySafeTypes.MemorySafeArrayList),
+
+			// Items moved from MyScriptCompiler's constructor
+			GetType(),
+			typeof(int),
+			typeof(XmlEntity),
+			typeof(HashSet<>),
+			typeof(Dictionary<, >),
+			typeof(Uri)
+
 		}, new string[6]
 		{
 			GetPrefixedBranchName(),
diff --git a/SpaceEngineers.Game/SpaceEngineers/Game/SpaceEngineersGame.cs b/SpaceEngineers.Game/SpaceEngineers/Game/SpaceEngineersGame.cs
index 5631626c..ff86199b 100644
--- a/SpaceEngineers.Game/SpaceEngineers/Game/SpaceEngineersGame.cs
+++ b/SpaceEngineers.Game/SpaceEngineers/Game/SpaceEngineersGame.cs
@@ -617,7 +617,11 @@ public class SpaceEngineersGame : MySandboxGame
 	{
 		MyLog.Default.WriteLine("SpaceEngineersGame.SetupAnalytics - START");
 		string projectId = "27bae5ba5219bcd64ddbf83113eabb30:d04e0431f97f90fae73b9d6ea99fc9746695bd11";
+#if DISABLED_ANALYTICS
 		IMyAnalytics myAnalytics = MyVRage.Platform.InitAnalytics(projectId, 1206032.ToString());
+#else
+        IMyAnalytics myAnalytics = null;
+#endif
 		if (myAnalytics != null)
 		{
 			MySpaceAnalytics.Instance.RegisterAnalyticsTracker(myAnalytics);
diff --git a/SpaceEngineers.Game/SpaceEngineers/Game/World/MySpaceRespawnComponent.cs b/SpaceEngineers.Game/SpaceEngineers/Game/World/MySpaceRespawnComponent.cs
index b810268b..4201ffe5 100644
--- a/SpaceEngineers.Game/SpaceEngineers/Game/World/MySpaceRespawnComponent.cs
+++ b/SpaceEngineers.Game/SpaceEngineers/Game/World/MySpaceRespawnComponent.cs
@@ -50,7 +50,7 @@ namespace SpaceEngineers.Game.World;
 public class MySpaceRespawnComponent : MyRespawnComponentBase
 {
 	[Serializable]
-	private struct RespawnCooldownEntry
+	protected struct RespawnCooldownEntry
 	{
 		private class SpaceEngineers_Game_World_MySpaceRespawnComponent_003C_003ERespawnCooldownEntry_003C_003EControllerId_003C_003EAccessor : IMemberAccessor<RespawnCooldownEntry, int>
 		{
diff --git a/SpaceEngineers.ObjectBuilders/Sandbox/Common/ObjectBuilders/MyObjectBuilder_AutomaticRifle.cs b/SpaceEngineers.ObjectBuilders/Sandbox/Common/ObjectBuilders/MyObjectBuilder_AutomaticRifle.cs
index 0428a7b2..be0aea84 100644
--- a/SpaceEngineers.ObjectBuilders/Sandbox/Common/ObjectBuilders/MyObjectBuilder_AutomaticRifle.cs
+++ b/SpaceEngineers.ObjectBuilders/Sandbox/Common/ObjectBuilders/MyObjectBuilder_AutomaticRifle.cs
@@ -187,13 +187,13 @@ public class MyObjectBuilder_AutomaticRifle : MyObjectBuilder_EntityBase, IMyObj
 		[MethodImpl(MethodImplOptions.AggressiveInlining)]
 		public virtual void Set(ref MyObjectBuilder_AutomaticRifle owner, in MyObjectBuilder_DeviceBase value)
 		{
-			owner.VRage_002EGame_002EObjectBuilders_002EIMyObjectBuilder_GunObject_003CVRage_002EGame_002EMyObjectBuilder_GunBase_003E_002EDeviceBase = value;
+			((IMyObjectBuilder_GunObject<MyObjectBuilder_GunBase>)owner).DeviceBase = value;
 		}
 
 		[MethodImpl(MethodImplOptions.AggressiveInlining)]
 		public virtual void Get(ref MyObjectBuilder_AutomaticRifle owner, out MyObjectBuilder_DeviceBase value)
 		{
-			value = owner.VRage_002EGame_002EObjectBuilders_002EIMyObjectBuilder_GunObject_003CVRage_002EGame_002EMyObjectBuilder_GunBase_003E_002EDeviceBase;
+			value = ((IMyObjectBuilder_GunObject<MyObjectBuilder_GunBase>)owner).DeviceBase;
 		}
 	}
 
diff --git a/SpaceEngineers/SpaceEngineers.csproj b/SpaceEngineers/SpaceEngineers.csproj
index d5970d9c..6e51b884 100644
--- a/SpaceEngineers/SpaceEngineers.csproj
+++ b/SpaceEngineers/SpaceEngineers.csproj
@@ -38,4 +38,13 @@
     </Reference>
     <Reference Include="System.Core" />
   </ItemGroup>
+  <ItemGroup>
+    <Content Include="steam_appid.txt">
+      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
+    </Content>
+    <None Remove="steam_appid.txt" />
+  </ItemGroup>
+  <Target Name="PostBuild" AfterTargets="PostBuildEvent">
+    <Exec Command="cd &quot;$(SolutionDir)&quot;&#10;CopyBinaryDependencies.bat &quot;$(TargetDir)&quot;" />
+  </Target>
 </Project>
\ No newline at end of file
diff --git a/SpaceEngineers/SpaceEngineers/MyProgram.cs b/SpaceEngineers/SpaceEngineers/MyProgram.cs
index fb0d460d..e7ec0194 100644
--- a/SpaceEngineers/SpaceEngineers/MyProgram.cs
+++ b/SpaceEngineers/SpaceEngineers/MyProgram.cs
@@ -26,6 +26,10 @@ using VRage.UserInterface;
 using VRage.Utils;
 using VRageRender;
 
+// Enabling BinaryFormatter. It will not work on .Net 9
+// See https://learn.microsoft.com/en-us/dotnet/standard/serialization/binaryformatter-security-guide
+using System.Runtime.Serialization.Formatters.Binary;
+
 namespace SpaceEngineers;
 
 public static class MyProgram
@@ -36,6 +40,10 @@ public static class MyProgram
 
 	public static void Main(string[] args)
 	{
+		// Enabling BinaryFormatter. It will not work on .Net 9
+		// See https://learn.microsoft.com/en-us/dotnet/standard/serialization/binaryformatter-security-guide
+		AppContext.SetSwitch("System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization", true);
+
 		Exception ex = null;
 		try
 		{
@@ -133,11 +141,13 @@ public static class MyProgram
 		{
 			spaceEngineersGame.Run(customRenderLoop: false, m_startup.DisposeSplashScreen);
 		}
+#if !DEBUG
 		catch (Exception exception)
 		{
 			MyDefaultLogInject.WriteLine(exception);
 			throw;
 		}
+#endif
 		finally
 		{
 			spaceEngineersGame.Dispose();
diff --git a/SpaceEngineers/app.config b/SpaceEngineers/app.config
deleted file mode 100644
index 0c4cf034..00000000
--- a/SpaceEngineers/app.config
+++ /dev/null
@@ -1,21 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<configuration>
-  <runtime>
-    <enforceFIPSPolicy enabled="false" />
-    <assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">
-      <dependentAssembly>
-        <assemblyIdentity name="System.ComponentModel.Annotations" publicKeyToken="b03f5f7f11d50a3a" culture="neutral" />
-        <bindingRedirect oldVersion="0.0.0.0-4.2.1.0" newVersion="4.2.1.0" />
-      </dependentAssembly>
-    </assemblyBinding>
-    <assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">
-      <dependentAssembly>
-        <assemblyIdentity name="System.Runtime.CompilerServices.Unsafe" publicKeyToken="b03f5f7f11d50a3a" culture="neutral" />
-        <bindingRedirect oldVersion="0.0.0.0-4.0.4.1" newVersion="4.0.4.1" />
-      </dependentAssembly>
-    </assemblyBinding>
-  </runtime>
-  <startup>
-    <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.6.1" />
-  </startup>
-</configuration>
\ No newline at end of file
diff --git a/SpaceEngineers/steam_appid.txt b/SpaceEngineers/steam_appid.txt
new file mode 100644
index 00000000..1917b49e
--- /dev/null
+++ b/SpaceEngineers/steam_appid.txt
@@ -0,0 +1 @@
+244850
\ No newline at end of file
diff --git a/VRage.Audio/VRage/Audio/MyXAudio2.cs b/VRage.Audio/VRage/Audio/MyXAudio2.cs
index 4de209f8..f1063cf6 100644
--- a/VRage.Audio/VRage/Audio/MyXAudio2.cs
+++ b/VRage.Audio/VRage/Audio/MyXAudio2.cs
@@ -752,7 +752,7 @@ public class MyXAudio2 : IMyAudio
 			}
 			else
 			{
-				m_x3dAudio = new X3DAudio(m_channelMask, X3DAudioVersion.Version29);
+				m_x3dAudio = new X3DAudio(m_channelMask, X3DAudioVersion.Default);
 			}
 			int num = text.IndexOf('\0');
 			if (num != -1)
diff --git a/VRage.EOS/VRage/EOS/MyEOSLobbyList.cs b/VRage.EOS/VRage/EOS/MyEOSLobbyList.cs
index a3d96623..d15223ef 100644
--- a/VRage.EOS/VRage/EOS/MyEOSLobbyList.cs
+++ b/VRage.EOS/VRage/EOS/MyEOSLobbyList.cs
@@ -12,7 +12,7 @@ namespace VRage.EOS;
 internal class MyEOSLobbyList<T> where T : class
 {
 	[CompilerGenerated]
-	private sealed class _003C_003Ec__DisplayClass32_0
+	private class _003C_003Ec__DisplayClass32_0
 	{
 		public MyEOSLobbyList<T> _003C_003E4__this;
 
@@ -78,7 +78,7 @@ internal class MyEOSLobbyList<T> where T : class
 	}
 
 	[CompilerGenerated]
-	private sealed class _003C_003Ec__DisplayClass32_1
+	private class _003C_003Ec__DisplayClass32_1: _003C_003Ec__DisplayClass32_0
 	{
 		public Result x;
 
@@ -431,21 +431,23 @@ internal class MyEOSLobbyList<T> where T : class
 		}
 		void OnResults(Result result, (string ConnectingString, T Item)[] servers)
 		{
-			if (result != Result.Success)
-			{
-				((_003C_003Ec__DisplayClass32_0)this)._003C_003E4__this.m_networking.Error($"Lobby search was not successful: {result}");
-			}
-			for (int i = 0; i < servers.Length; i++)
-			{
-				if (((_003C_003Ec__DisplayClass32_0)this)._003C_003E4__this.m_networking.VerboseLogging)
-				{
-					((_003C_003Ec__DisplayClass32_0)this)._003C_003E4__this.Log("Server [" + servers[i].ConnectingString + "]: " + ((servers[i].Item == null) ? "Not Available" : "Loaded") + ".");
-				}
-				if (servers[i].Item != null)
-				{
-					((_003C_003Ec__DisplayClass32_0)this).lobbyList.Add(servers[i].Item);
-				}
-			}
+            // Disabled due to compile errors
+            //
+			// if (result != Result.Success)
+			// {
+			// 	((_003C_003Ec__DisplayClass32_0)this)._003C_003E4__this.m_networking.Error($"Lobby search was not successful: {result}");
+			// }
+			// for (int i = 0; i < servers.Length; i++)
+			// {
+			// 	if (((_003C_003Ec__DisplayClass32_0)this)._003C_003E4__this.m_networking.VerboseLogging)
+			// 	{
+			// 		((_003C_003Ec__DisplayClass32_0)this)._003C_003E4__this.Log("Server [" + servers[i].ConnectingString + "]: " + ((servers[i].Item == null) ? "Not Available" : "Loaded") + ".");
+			// 	}
+			// 	if (servers[i].Item != null)
+			// 	{
+			// 		((_003C_003Ec__DisplayClass32_0)this).lobbyList.Add(servers[i].Item);
+			// 	}
+			// }
 			Deliver();
 		}
 	}
diff --git a/VRage.Game/VRage/Game/Entity/MyPhysicalInventoryItem.cs b/VRage.Game/VRage/Game/Entity/MyPhysicalInventoryItem.cs
index d6fa3d20..9f7cef3f 100644
--- a/VRage.Game/VRage/Game/Entity/MyPhysicalInventoryItem.cs
+++ b/VRage.Game/VRage/Game/Entity/MyPhysicalInventoryItem.cs
@@ -74,6 +74,7 @@ public struct MyPhysicalInventoryItem : VRage.Game.ModAPI.IMyInventoryItem, VRag
 		}
 	}
 
+#if DISABLED_INVALID
 	private class VRage_Game_Entity_MyPhysicalInventoryItem_003C_003EVRage_002EGame_002EModAPI_002EIngame_002EIMyInventoryItem_002EAmount_003C_003EAccessor : IMemberAccessor<MyPhysicalInventoryItem, MyFixedPoint>
 	{
 		[MethodImpl(MethodImplOptions.AggressiveInlining)]
@@ -133,6 +134,7 @@ public struct MyPhysicalInventoryItem : VRage.Game.ModAPI.IMyInventoryItem, VRag
 			value = owner.VRage_002EGame_002EModAPI_002EIngame_002EIMyInventoryItem_002EItemId;
 		}
 	}
+#endif
 
 	public MyFixedPoint Amount;
 
diff --git a/VRage.Game/VRage/Game/MyDefinitionId.cs b/VRage.Game/VRage/Game/MyDefinitionId.cs
index 56f8dd05..1042c7cb 100644
--- a/VRage.Game/VRage/Game/MyDefinitionId.cs
+++ b/VRage.Game/VRage/Game/MyDefinitionId.cs
@@ -83,9 +83,9 @@ public struct MyDefinitionId : IEquatable<MyDefinitionId>
 
 	private static ThreadLocal<StringBuilder> m_reusableStringBuilder = new ThreadLocal<StringBuilder>(() => new StringBuilder());
 
-	public readonly MyObjectBuilderType TypeId;
+	public MyObjectBuilderType TypeId;
 
-	public readonly MyStringHash SubtypeId;
+	public MyStringHash SubtypeId;
 
 	public static readonly DefinitionIdComparerType Comparer = new DefinitionIdComparerType();
 
diff --git a/VRage.Game/VRage/Game/MyObjectBuilder_GoodAIControlHandTool.cs b/VRage.Game/VRage/Game/MyObjectBuilder_GoodAIControlHandTool.cs
index 9c9587aa..aea64de2 100644
--- a/VRage.Game/VRage/Game/MyObjectBuilder_GoodAIControlHandTool.cs
+++ b/VRage.Game/VRage/Game/MyObjectBuilder_GoodAIControlHandTool.cs
@@ -168,13 +168,13 @@ public class MyObjectBuilder_GoodAIControlHandTool : MyObjectBuilder_HandToolBas
 		[MethodImpl(MethodImplOptions.AggressiveInlining)]
 		public virtual void Set(ref MyObjectBuilder_GoodAIControlHandTool owner, in MyObjectBuilder_DeviceBase value)
 		{
-			Set(ref Unsafe.As<MyObjectBuilder_GoodAIControlHandTool, MyObjectBuilder_HandToolBase>(ref owner), in value);
+			owner.DeviceBase = (MyObjectBuilder_ToolBase)value;
 		}
 
 		[MethodImpl(MethodImplOptions.AggressiveInlining)]
 		public virtual void Get(ref MyObjectBuilder_GoodAIControlHandTool owner, out MyObjectBuilder_DeviceBase value)
 		{
-			Get(ref Unsafe.As<MyObjectBuilder_GoodAIControlHandTool, MyObjectBuilder_HandToolBase>(ref owner), out value);
+			value = owner.DeviceBase;
 		}
 	}
 
@@ -183,13 +183,13 @@ public class MyObjectBuilder_GoodAIControlHandTool : MyObjectBuilder_HandToolBas
 		[MethodImpl(MethodImplOptions.AggressiveInlining)]
 		public virtual void Set(ref MyObjectBuilder_GoodAIControlHandTool owner, in MyStringHash value)
 		{
-			Set(ref Unsafe.As<MyObjectBuilder_GoodAIControlHandTool, MyObjectBuilder_Base>(ref owner), in value);
+			owner.m_serializableSubtypeId = value;
 		}
 
 		[MethodImpl(MethodImplOptions.AggressiveInlining)]
 		public virtual void Get(ref MyObjectBuilder_GoodAIControlHandTool owner, out MyStringHash value)
 		{
-			Get(ref Unsafe.As<MyObjectBuilder_GoodAIControlHandTool, MyObjectBuilder_Base>(ref owner), out value);
+			value = owner.m_serializableSubtypeId;
 		}
 	}
 
diff --git a/VRage.Game/VRage/Game/MyObjectBuilder_HandToolBase.cs b/VRage.Game/VRage/Game/MyObjectBuilder_HandToolBase.cs
index ccc19f32..5ad3c2f3 100644
--- a/VRage.Game/VRage/Game/MyObjectBuilder_HandToolBase.cs
+++ b/VRage.Game/VRage/Game/MyObjectBuilder_HandToolBase.cs
@@ -170,13 +170,13 @@ public class MyObjectBuilder_HandToolBase : MyObjectBuilder_EntityBase, IMyObjec
 		[MethodImpl(MethodImplOptions.AggressiveInlining)]
 		public virtual void Set(ref MyObjectBuilder_HandToolBase owner, in MyObjectBuilder_DeviceBase value)
 		{
-			owner.VRage_002EGame_002EObjectBuilders_002EIMyObjectBuilder_GunObject_003CVRage_002EGame_002EMyObjectBuilder_ToolBase_003E_002EDeviceBase = value;
+			owner.DeviceBase = (MyObjectBuilder_ToolBase)value;
 		}
 
 		[MethodImpl(MethodImplOptions.AggressiveInlining)]
 		public virtual void Get(ref MyObjectBuilder_HandToolBase owner, out MyObjectBuilder_DeviceBase value)
 		{
-			value = owner.VRage_002EGame_002EObjectBuilders_002EIMyObjectBuilder_GunObject_003CVRage_002EGame_002EMyObjectBuilder_ToolBase_003E_002EDeviceBase;
+			value = owner.DeviceBase;
 		}
 	}
 
diff --git a/VRage.Game/VRage/Game/ObjectBuilders/Animation/MyObjectBuilder_AnimationSMVariable.cs b/VRage.Game/VRage/Game/ObjectBuilders/Animation/MyObjectBuilder_AnimationSMVariable.cs
index 34f266e7..f4c9fad8 100644
--- a/VRage.Game/VRage/Game/ObjectBuilders/Animation/MyObjectBuilder_AnimationSMVariable.cs
+++ b/VRage.Game/VRage/Game/ObjectBuilders/Animation/MyObjectBuilder_AnimationSMVariable.cs
@@ -102,6 +102,7 @@ public class MyObjectBuilder_AnimationSMVariable : MyObjectBuilder_Base
 		}
 	}
 
+#if DISABLED_DUPLICATE
 	protected class VRage_Game_ObjectBuilders_Animation_MyObjectBuilder_AnimationSMVariable_003C_003ESubtypeName_003C_003EAccessor : VRage_ObjectBuilders_MyObjectBuilder_Base_003C_003ESubtypeName_003C_003EAccessor, IMemberAccessor<MyObjectBuilder_AnimationSMVariable, string>
 	{
 		[MethodImpl(MethodImplOptions.AggressiveInlining)]
@@ -116,6 +117,7 @@ public class MyObjectBuilder_AnimationSMVariable : MyObjectBuilder_Base
 			Get(ref Unsafe.As<MyObjectBuilder_AnimationSMVariable, MyObjectBuilder_Base>(ref owner), out value);
 		}
 	}
+#endif
 
 	private class VRage_Game_ObjectBuilders_Animation_MyObjectBuilder_AnimationSMVariable_003C_003EActor : IActivator, IActivator<MyObjectBuilder_AnimationSMVariable>
 	{
diff --git a/VRage.Game/VRage/Game/ObjectBuilders/Components/MyObjectBuilder_HierarchyComponentBase.cs b/VRage.Game/VRage/Game/ObjectBuilders/Components/MyObjectBuilder_HierarchyComponentBase.cs
index f7eab2c5..edef2011 100644
--- a/VRage.Game/VRage/Game/ObjectBuilders/Components/MyObjectBuilder_HierarchyComponentBase.cs
+++ b/VRage.Game/VRage/Game/ObjectBuilders/Components/MyObjectBuilder_HierarchyComponentBase.cs
@@ -111,7 +111,7 @@ public class MyObjectBuilder_HierarchyComponentBase : MyObjectBuilder_ComponentB
 	    MyObjectBuilder_HierarchyComponentBase IActivator<MyObjectBuilder_HierarchyComponentBase>.CreateInstance() => new MyObjectBuilder_HierarchyComponentBase();
 	}
 
-	[ProtoMember(1, AsReference = true)]
+	[ProtoMember(1)]
 	[DynamicItem(typeof(MyObjectBuilderDynamicSerializer), true)]
 	[XmlArrayItem("MyObjectBuilder_EntityBase", Type = typeof(MyAbstractXmlSerializer<MyObjectBuilder_EntityBase>))]
 	public List<MyObjectBuilder_EntityBase> Children = new List<MyObjectBuilder_EntityBase>();
diff --git a/VRage.Game/VRage/Game/ObjectBuilders/MyObjectBuilder_AnimationLayer.cs b/VRage.Game/VRage/Game/ObjectBuilders/MyObjectBuilder_AnimationLayer.cs
index 4db60378..a69fed14 100644
--- a/VRage.Game/VRage/Game/ObjectBuilders/MyObjectBuilder_AnimationLayer.cs
+++ b/VRage.Game/VRage/Game/ObjectBuilders/MyObjectBuilder_AnimationLayer.cs
@@ -16,12 +16,13 @@ public class MyObjectBuilder_AnimationLayer : MyObjectBuilder_Base
 	public enum MyLayerMode
 	{
 		// error: nested types are not permitted in C#.
+		/*
 		private class VRage_Game_ObjectBuilders_MyObjectBuilder_AnimationLayer_003C_003EMyLayerMode_003C_003EActor : IActivator, IActivator<MyLayerMode>
 		{
 		    object IActivator.CreateInstance() => (object) new MyLayerMode();
 		    MyLayerMode IActivator<MyLayerMode>.CreateInstance() => new MyLayerMode();
 		}
-		,
+		,*/
 		Replace,
 		Add
 	}
diff --git a/VRage.Game/VRage/Game/ObjectBuilders/VisualScripting/MyObjectBuilder_NewListScriptNode.cs b/VRage.Game/VRage/Game/ObjectBuilders/VisualScripting/MyObjectBuilder_NewListScriptNode.cs
index 93fd8ede..82fccf5e 100644
--- a/VRage.Game/VRage/Game/ObjectBuilders/VisualScripting/MyObjectBuilder_NewListScriptNode.cs
+++ b/VRage.Game/VRage/Game/ObjectBuilders/VisualScripting/MyObjectBuilder_NewListScriptNode.cs
@@ -159,8 +159,8 @@ public class MyObjectBuilder_NewListScriptNode : MyObjectBuilder_ScriptNode
 	public string Type = string.Empty;
 
 	[ProtoMember(5)]
-	public readonly List<string> DefaultEntries = new List<string>();
+	public List<string> DefaultEntries = new List<string>();
 
 	[ProtoMember(10)]
-	public readonly List<MyVariableIdentifier> Connections = new List<MyVariableIdentifier>();
+	public List<MyVariableIdentifier> Connections = new List<MyVariableIdentifier>();
 }
diff --git a/VRage.Game/VRage/Game/ObjectBuilders/VisualScripting/MyObjectBuilder_SwitchScriptNode.cs b/VRage.Game/VRage/Game/ObjectBuilders/VisualScripting/MyObjectBuilder_SwitchScriptNode.cs
index 12715259..ae1b4013 100644
--- a/VRage.Game/VRage/Game/ObjectBuilders/VisualScripting/MyObjectBuilder_SwitchScriptNode.cs
+++ b/VRage.Game/VRage/Game/ObjectBuilders/VisualScripting/MyObjectBuilder_SwitchScriptNode.cs
@@ -238,7 +238,7 @@ public class MyObjectBuilder_SwitchScriptNode : MyObjectBuilder_ScriptNode
 	public List<int> SequenceInputs = new List<int>();
 
 	[ProtoMember(5)]
-	public readonly List<OptionData> Options = new List<OptionData>();
+	public List<OptionData> Options = new List<OptionData>();
 
 	[ProtoMember(10)]
 	public MyVariableIdentifier ValueInput;
diff --git a/VRage.Game/VRage/ObjectBuilders/MyObjectBuilder_Base.cs b/VRage.Game/VRage/ObjectBuilders/MyObjectBuilder_Base.cs
index 82f3bbbd..0ea9182c 100644
--- a/VRage.Game/VRage/ObjectBuilders/MyObjectBuilder_Base.cs
+++ b/VRage.Game/VRage/ObjectBuilders/MyObjectBuilder_Base.cs
@@ -83,7 +83,7 @@ public abstract class MyObjectBuilder_Base
 	public MyStringHash SubtypeId => m_subtypeId;
 
 	[Serialize]
-	private MyStringHash m_serializableSubtypeId
+	protected MyStringHash m_serializableSubtypeId
 	{
 		get
 		{
diff --git a/VRage.Game/VRage/ObjectBuilders/MyRuntimeObjectBuilderId.cs b/VRage.Game/VRage/ObjectBuilders/MyRuntimeObjectBuilderId.cs
index 66e4e02c..913628aa 100644
--- a/VRage.Game/VRage/ObjectBuilders/MyRuntimeObjectBuilderId.cs
+++ b/VRage.Game/VRage/ObjectBuilders/MyRuntimeObjectBuilderId.cs
@@ -31,7 +31,7 @@ public struct MyRuntimeObjectBuilderId
 	public static readonly MyRuntimeObjectBuilderIdComparer Comparer = new MyRuntimeObjectBuilderIdComparer();
 
 	[ProtoMember(1)]
-	public readonly ushort Value;
+	public ushort Value;
 
 	public bool IsValid => Value != 0;
 
diff --git a/VRage.Game/VRage/ObjectBuilders/Private/MyObjectBuilderSerializerKeen.cs b/VRage.Game/VRage/ObjectBuilders/Private/MyObjectBuilderSerializerKeen.cs
index 5ee612d5..70732dd7 100644
--- a/VRage.Game/VRage/ObjectBuilders/Private/MyObjectBuilderSerializerKeen.cs
+++ b/VRage.Game/VRage/ObjectBuilders/Private/MyObjectBuilderSerializerKeen.cs
@@ -37,7 +37,11 @@ public class MyObjectBuilderSerializerKeen
 
 	static MyObjectBuilderSerializerKeen()
 	{
+#if THIS_CAUSED_CRASHES
+		// Crashed inside protobuf-net code inside calls to MyObjectBuilderSerializerKeen.Clone
 		ENABLE_PROTOBUFFERS_CLONING = true;
+#endif
+
 		Dynamic = new MySerializeInfo(MyObjectFlags.Dynamic, MyPrimitiveFlags.None, 0, SerializeDynamic, null, null);
 		m_typeModel = MyVRage.Platform?.GetTypeModel();
 		Serializer = m_typeModel?.Model;
diff --git a/VRage.Game/app.config b/VRage.Game/app.config
deleted file mode 100644
index 3321cdac..00000000
--- a/VRage.Game/app.config
+++ /dev/null
@@ -1,31 +0,0 @@
-﻿<?xml version="1.0" encoding="utf-8"?>
-<configuration>
-  <runtime>
-    <assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">
-      <dependentAssembly>
-        <assemblyIdentity name="Microsoft.CodeAnalysis" publicKeyToken="31bf3856ad364e35" culture="neutral" />
-        <bindingRedirect oldVersion="0.0.0.0-1.1.0.0" newVersion="1.1.0.0" />
-      </dependentAssembly>
-      <dependentAssembly>
-        <assemblyIdentity name="System.Reflection.Metadata" publicKeyToken="b03f5f7f11d50a3a" culture="neutral" />
-        <bindingRedirect oldVersion="0.0.0.0-1.1.0.0" newVersion="1.1.0.0" />
-      </dependentAssembly>
-      <dependentAssembly>
-        <assemblyIdentity name="System.Composition.AttributedModel" publicKeyToken="b03f5f7f11d50a3a" culture="neutral" />
-        <bindingRedirect oldVersion="0.0.0.0-1.0.30.0" newVersion="1.0.30.0" />
-      </dependentAssembly>
-      <dependentAssembly>
-        <assemblyIdentity name="System.Composition.Runtime" publicKeyToken="b03f5f7f11d50a3a" culture="neutral" />
-        <bindingRedirect oldVersion="0.0.0.0-1.0.30.0" newVersion="1.0.30.0" />
-      </dependentAssembly>
-      <dependentAssembly>
-        <assemblyIdentity name="System.Composition.TypedParts" publicKeyToken="b03f5f7f11d50a3a" culture="neutral" />
-        <bindingRedirect oldVersion="0.0.0.0-1.0.30.0" newVersion="1.0.30.0" />
-      </dependentAssembly>
-      <dependentAssembly>
-        <assemblyIdentity name="System.Composition.Hosting" publicKeyToken="b03f5f7f11d50a3a" culture="neutral" />
-        <bindingRedirect oldVersion="0.0.0.0-1.0.30.0" newVersion="1.0.30.0" />
-      </dependentAssembly>
-    </assemblyBinding>
-  </runtime>
-<startup><supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.6.1" /></startup></configuration>
diff --git a/VRage.Library/VRage.Library.csproj b/VRage.Library/VRage.Library.csproj
index defe55eb..b7adab89 100644
--- a/VRage.Library/VRage.Library.csproj
+++ b/VRage.Library/VRage.Library.csproj
@@ -14,6 +14,7 @@
     <PackageReference Include="System.Buffers" Version="4.5.1" />
     <PackageReference Include="System.Memory" Version="4.5.5" />
     <PackageReference Include="System.Runtime.CompilerServices.Unsafe" Version="6.0.0" />
+    <PackageReference Include="protobuf-net" Version="3.0.131" />
     <PackageReference Include="protobuf-net.Core" Version="3.0.131" />
     <ProjectReference Include="..\VRage.Network\VRage.Network.csproj" />
   </ItemGroup>
diff --git a/VRage.Library/VRage/Filesystem/MyFileSystem.cs b/VRage.Library/VRage/Filesystem/MyFileSystem.cs
index 2e351a5d..42c1ae06 100644
--- a/VRage.Library/VRage/Filesystem/MyFileSystem.cs
+++ b/VRage.Library/VRage/Filesystem/MyFileSystem.cs
@@ -15,7 +15,12 @@ public static class MyFileSystem
 
 	public static string ExePath = new FileInfo(m_mainAssembly.Location).DirectoryName;
 
-	public static string RootPath = new FileInfo(ExePath).Directory?.FullName ?? Path.GetFullPath(ExePath);
+	// During development use the data files of the Space Engineers installation.
+	// Define the SPACE_ENGINEERS_ROOT environment variable to point to there.
+	// Usual value: C:\Program Files (x86)\Steam\steamapps\common\SpaceEngineers
+	private static string rootPath;
+	public static string RootPath => rootPath ??= Environment.GetEnvironmentVariable("SPACE_ENGINEERS_ROOT") ?? 
+	                                              (new FileInfo(ExePath).Directory?.FullName ?? Path.GetFullPath(ExePath));
 
 	private static string m_shadersBasePath;
 
diff --git a/VRage.Library/VRage/Serialization/ProtoSerializer.cs b/VRage.Library/VRage/Serialization/ProtoSerializer.cs
index b1635720..63ce1f14 100644
--- a/VRage.Library/VRage/Serialization/ProtoSerializer.cs
+++ b/VRage.Library/VRage/Serialization/ProtoSerializer.cs
@@ -10,7 +10,7 @@ public class ProtoSerializer<T> : ISerializer<T>
 
 	public ProtoSerializer(TypeModel model = null)
 	{
-		Model = model ?? TypeModel.Default;
+		Model = model ?? RuntimeTypeModel.Default;
 	}
 
 	public void Serialize(ByteStream destination, ref T data)
diff --git a/VRage.Math/VRageMath/BoundingFrustumD.cs b/VRage.Math/VRageMath/BoundingFrustumD.cs
index e689294e..82a1d7ef 100644
--- a/VRage.Math/VRageMath/BoundingFrustumD.cs
+++ b/VRage.Math/VRageMath/BoundingFrustumD.cs
@@ -86,9 +86,9 @@ public class BoundingFrustumD : IEquatable<BoundingFrustumD>
 		}
 	}
 
-	private readonly PlaneD[] m_planes = new PlaneD[6];
+	private PlaneD[] m_planes = new PlaneD[6];
 
-	internal readonly Vector3D[] CornerArray = new Vector3D[8];
+	internal Vector3D[] CornerArray = new Vector3D[8];
 
 	/// <summary>
 	/// Specifies the total number of corners (8) in the BoundingFrustumD.
diff --git a/VRage.Math/VRageMath/Gjk.cs b/VRage.Math/VRageMath/Gjk.cs
index 11fc57b2..8e8be514 100644
--- a/VRage.Math/VRageMath/Gjk.cs
+++ b/VRage.Math/VRageMath/Gjk.cs
@@ -5,7 +5,7 @@ using VRage.Network;
 namespace VRageMath;
 
 [Serializable]
-internal class Gjk
+public class Gjk
 {
 	protected class VRageMath_Gjk_003C_003EclosestPoint_003C_003EAccessor : IMemberAccessor<Gjk, Vector3>
 	{
diff --git a/VRage.Math/VRageMath/GjkD.cs b/VRage.Math/VRageMath/GjkD.cs
index 55cdc705..c3fe2319 100644
--- a/VRage.Math/VRageMath/GjkD.cs
+++ b/VRage.Math/VRageMath/GjkD.cs
@@ -5,7 +5,7 @@ using VRage.Network;
 namespace VRageMath;
 
 [Serializable]
-internal class GjkD
+public class GjkD
 {
 	protected class VRageMath_GjkD_003C_003EclosestPoint_003C_003EAccessor : IMemberAccessor<GjkD, Vector3D>
 	{
diff --git a/VRage.NativeAftermath/-CrtImplementationDetails-/Progress.cs b/VRage.NativeAftermath/-CrtImplementationDetails-/Progress.cs
index db790a4d..51ea6eec 100644
--- a/VRage.NativeAftermath/-CrtImplementationDetails-/Progress.cs
+++ b/VRage.NativeAftermath/-CrtImplementationDetails-/Progress.cs
@@ -2,7 +2,6 @@ using System.Runtime.CompilerServices;
 
 namespace _003CCrtImplementationDetails_003E;
 
-[NativeCppClass]
 internal enum Progress
 {
 
diff --git a/VRage.NativeAftermath/-CrtImplementationDetails-/TriBool.cs b/VRage.NativeAftermath/-CrtImplementationDetails-/TriBool.cs
index 7eef8720..0e44592d 100644
--- a/VRage.NativeAftermath/-CrtImplementationDetails-/TriBool.cs
+++ b/VRage.NativeAftermath/-CrtImplementationDetails-/TriBool.cs
@@ -2,7 +2,6 @@ using System.Runtime.CompilerServices;
 
 namespace _003CCrtImplementationDetails_003E;
 
-[NativeCppClass]
 internal enum TriBool
 {
 
diff --git a/VRage.NativeAftermath/-Module-.cs b/VRage.NativeAftermath/-Module-.cs
index 3bccc187..86031220 100644
--- a/VRage.NativeAftermath/-Module-.cs
+++ b/VRage.NativeAftermath/-Module-.cs
@@ -114,7 +114,7 @@ internal class _003CModule_003E
 
 	internal static __scrt_native_startup_state __scrt_current_native_startup_state/* Not supported: data() */;
 
-	internal unsafe static void* __scrt_native_startup_lock/* Not supported: data(00 00 00 00 00 00 00 00) */;
+	internal unsafe static IntPtr __scrt_native_startup_lock/* Not supported: data(00 00 00 00 00 00 00 00) */;
 
 	internal static _0024ArrayType_0024_0024_0024BY0A_0040P6AXXZ __xc_a/* Not supported: data(00) */;
 
@@ -150,6 +150,14 @@ internal class _003CModule_003E
 		return new Guid(*(uint*)guid, *(ushort*)((ulong)(nint)guid + 4uL), *(ushort*)((ulong)(nint)guid + 6uL), *(byte*)((ulong)(nint)guid + 8uL), *(byte*)((ulong)(nint)guid + 9uL), *(byte*)((ulong)(nint)guid + 10uL), *(byte*)((ulong)(nint)guid + 11uL), *(byte*)((ulong)(nint)guid + 12uL), *(byte*)((ulong)(nint)guid + 13uL), *(byte*)((ulong)(nint)guid + 14uL), *(byte*)((ulong)(nint)guid + 15uL));
 	}
 
+	// delegate* unmanaged[Cdecl, Cdecl]<IntPtr, IUnknown**, int>
+	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
+	private unsafe delegate int IntPtrIUnknownToIntDelegate(IntPtr ptr, IUnknown** unk);
+
+	// delegate* unmanaged[Cdecl, Cdecl]<IntPtr, uint>
+	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
+	private delegate uint IntPtrToUintDelegate(IntPtr ptr);
+
 	[SecurityCritical]
 	internal unsafe static int __get_default_appdomain(IUnknown** ppUnk)
 	{
@@ -177,9 +185,12 @@ internal class _003CModule_003E
 		goto IL_0055;
 		IL_0036:
 		long num2 = *(long*)(*(long*)ptr + 104);
-		num = ((delegate* unmanaged[Cdecl, Cdecl]<IntPtr, IUnknown**, int>)num2)((nint)ptr, ppUnk);
+		var fn1 = Marshal.GetDelegateForFunctionPointer<IntPtrIUnknownToIntDelegate>((IntPtr)num2);
+		num = fn1((nint)ptr, ppUnk);
 		ICorRuntimeHost* intPtr = ptr;
-		((delegate* unmanaged[Cdecl, Cdecl]<IntPtr, uint>)(*(ulong*)(*(long*)intPtr + 16)))((nint)intPtr);
+		var num3 = *(ulong*)(*(long*)intPtr + 16);
+		var fn2 = Marshal.GetDelegateForFunctionPointer<IntPtrToUintDelegate>((IntPtr)num3);
+		fn2((nint)intPtr);
 		goto IL_0055;
 		IL_0055:
 		return num;
@@ -188,7 +199,9 @@ internal class _003CModule_003E
 	internal unsafe static void __release_appdomain(IUnknown* ppUnk)
 	{
 		//IL_000d: Expected I, but got I8
-		((delegate* unmanaged[Cdecl, Cdecl]<IntPtr, uint>)(*(ulong*)(*(long*)ppUnk + 16)))((nint)ppUnk);
+		var num = *(ulong*)(*(long*)ppUnk + 16);
+		var fn = Marshal.GetDelegateForFunctionPointer<IntPtrToUintDelegate>((IntPtr)num);
+		fn((nint)ppUnk);
 	}
 
 	[SecurityCritical]
@@ -213,8 +226,24 @@ internal class _003CModule_003E
 		return null;
 	}
 
+	// delegate* unmanaged[Cdecl, Cdecl]<void>*
+	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
+	internal unsafe delegate void FunctionDelegate();
+
+	// delegate* unmanaged[Cdecl, Cdecl]<int>*
+	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
+	internal unsafe delegate int GetIntDelegate();
+
+	// delegate* unmanaged[Cdecl, Cdecl]<void *, int>*
+	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
+	internal unsafe delegate int CallbackDelegate(void* p);
+
+	// delegate* unmanaged[Cdecl, Cdecl]<IntPtr, uint, delegate* unmanaged[Cdecl, Cdecl]<void*, int>, void*, int>
+	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
+	internal unsafe delegate int IntPtrUintCallbackVoidPtrToInt(IntPtr ptr, uint num, int **callback, void *voidPtr);
+
 	[SecurityCritical]
-	internal unsafe static void _003CCrtImplementationDetails_003E_002EDoCallBackInDefaultDomain(delegate* unmanaged[Cdecl, Cdecl]<void*, int> function, void* cookie)
+	internal unsafe static void _003CCrtImplementationDetails_003E_002EDoCallBackInDefaultDomain(int** callbackFunction, void* cookie)
 	{
 		//IL_005e: Expected I, but got I8
 		//IL_0044: Expected I, but got I8
@@ -224,7 +253,8 @@ internal class _003CModule_003E
 		{
 			AppDomain appDomain = _003CCrtImplementationDetails_003E_002EGetDefaultDomain();
 			long num = *(long*)(*(long*)ptr + 64);
-			int num2 = ((delegate* unmanaged[Cdecl, Cdecl]<IntPtr, uint, delegate* unmanaged[Cdecl, Cdecl]<void*, int>, void*, int>)num)((nint)ptr, (uint)appDomain.Id, function, cookie);
+			var fn = Marshal.GetDelegateForFunctionPointer<IntPtrUintCallbackVoidPtrToInt>((IntPtr)num);
+			int num2 = fn((nint)ptr, (uint)appDomain.Id, callbackFunction, cookie);
 			if (num2 < 0)
 			{
 				Marshal.ThrowExceptionForHR(num2);
@@ -232,7 +262,9 @@ internal class _003CModule_003E
 		}
 		finally
 		{
-			((delegate* unmanaged[Cdecl, Cdecl]<IntPtr, uint>)(*(ulong*)(*(long*)ptr + 16)))((nint)ptr);
+			var num = *(ulong*)(*(long*)ptr + 16);
+			var fn = Marshal.GetDelegateForFunctionPointer<IntPtrToUintDelegate>((IntPtr)num);
+			fn((nint)ptr);
 		}
 	}
 
@@ -339,7 +371,7 @@ internal class _003CModule_003E
 	internal unsafe static void _003CCrtImplementationDetails_003E_002EDefaultDomain_002EInitialize()
 	{
 		//IL_000c: Expected I, but got I8
-		_003CCrtImplementationDetails_003E_002EDoCallBackInDefaultDomain((delegate* unmanaged[Cdecl, Cdecl]<void*, int>)__unep_0040_003FDoNothing_0040DefaultDomain_0040_003CCrtImplementationDetails_003E_0040_0040_0024_0024FCAJPEAX_0040Z, null);
+		_003CCrtImplementationDetails_003E_002EDoCallBackInDefaultDomain(__unep_0040_003FDoNothing_0040DefaultDomain_0040_003CCrtImplementationDetails_003E_0040_0040_0024_0024FCAJPEAX_0040Z, null);
 	}
 
 	internal static void _003FA0x6b6762b8_002E_003F_003F__E_003FInitialized_0040CurrentDomain_0040_003CCrtImplementationDetails_003E_0040_0040_0024_0024Q2HA_0040_0040YMXXZ()
@@ -413,11 +445,11 @@ internal class _003CModule_003E
 		{
 			_003FInitializedNative_0040CurrentDomain_0040_003CCrtImplementationDetails_003E_0040_0040_0024_0024Q2W4Progress_00402_0040A = (Progress)1;
 			__scrt_current_native_startup_state = (__scrt_native_startup_state)1;
-			if (_initterm_e((delegate* unmanaged[Cdecl, Cdecl]<int>*)System.Runtime.CompilerServices.Unsafe.AsPointer(ref __xi_a), (delegate* unmanaged[Cdecl, Cdecl]<int>*)System.Runtime.CompilerServices.Unsafe.AsPointer(ref __xi_z)) != 0)
+			if (_initterm_e(Unsafe.AsPointer(ref __xi_a), Unsafe.AsPointer(ref __xi_z)) != 0)
 			{
 				_003CCrtImplementationDetails_003E_002EThrowModuleLoadException(gcroot_003CSystem_003A_003AString_0020_005E_003E_002E_002EPE_0024AAVString_0040System_0040_0040((gcroot_003CSystem_003A_003AString_0020_005E_003E*)P_0));
 			}
-			_initterm((delegate* unmanaged[Cdecl, Cdecl]<void>*)System.Runtime.CompilerServices.Unsafe.AsPointer(ref __xc_a), (delegate* unmanaged[Cdecl, Cdecl]<void>*)System.Runtime.CompilerServices.Unsafe.AsPointer(ref __xc_z));
+			_initterm(Unsafe.AsPointer(ref __xc_a), Unsafe.AsPointer(ref __xc_z));
 			__scrt_current_native_startup_state = (__scrt_native_startup_state)2;
 			_003FInitializedNativeFromCCTOR_0040DefaultDomain_0040_003CCrtImplementationDetails_003E_0040_00402_NA = true;
 			_003FInitializedNative_0040CurrentDomain_0040_003CCrtImplementationDetails_003E_0040_0040_0024_0024Q2W4Progress_00402_0040A = (Progress)2;
@@ -489,7 +521,7 @@ internal class _003CModule_003E
 				}
 				finally
 				{
-					void* ptr2 = (void*)Interlocked.CompareExchange(ref System.Runtime.CompilerServices.Unsafe.As<void*, long>(ref __scrt_native_startup_lock), (nint)ptr, 0L);
+					void* ptr2 = (void*)Interlocked.CompareExchange(ref System.Runtime.CompilerServices.Unsafe.As<IntPtr, long>(ref __scrt_native_startup_lock), (nint)ptr, 0L);
 					if (ptr2 == null)
 					{
 						num2 = 1;
@@ -520,7 +552,7 @@ internal class _003CModule_003E
 		{
 			if (num == 0)
 			{
-				Interlocked.Exchange(ref System.Runtime.CompilerServices.Unsafe.As<void*, long>(ref __scrt_native_startup_lock), 0L);
+				Interlocked.Exchange(ref System.Runtime.CompilerServices.Unsafe.As<IntPtr, long>(ref __scrt_native_startup_lock), 0L);
 			}
 		}
 		if (num3 != 0)
@@ -566,7 +598,7 @@ internal class _003CModule_003E
 			}
 			else
 			{
-				_003CCrtImplementationDetails_003E_002EDoCallBackInDefaultDomain((delegate* unmanaged[Cdecl, Cdecl]<void*, int>)__unep_0040_003F_UninitializeDefaultDomain_0040LanguageSupport_0040_003CCrtImplementationDetails_003E_0040_0040_0024_0024FCAJPEAX_0040Z, null);
+				_003CCrtImplementationDetails_003E_002EDoCallBackInDefaultDomain(__unep_0040_003F_UninitializeDefaultDomain_0040LanguageSupport_0040_003CCrtImplementationDetails_003E_0040_0040_0024_0024FCAJPEAX_0040Z, null);
 			}
 		}
 	}
@@ -676,7 +708,8 @@ internal class _003CModule_003E
 		catch
 		{
 			//try-fault
-			___CxxCallUnwindDtor((delegate*<void*, void>)(delegate*<LanguageSupport*, void>)(&_003CCrtImplementationDetails_003E_002ELanguageSupport_002E_007Bdtor_007D), &languageSupport);
+			// See the comment above the commented out ___CxxCallUnwindDtor method
+			// ___CxxCallUnwindDtor((delegate*<void*, void>)(delegate*<LanguageSupport*, void>)(&_003CCrtImplementationDetails_003E_002ELanguageSupport_002E_007Bdtor_007D), &languageSupport);
 			throw;
 		}
 		_003CCrtImplementationDetails_003E_002ELanguageSupport_002E_007Bdtor_007D(&languageSupport);
@@ -753,7 +786,8 @@ internal class _003CModule_003E
 		}
 		else
 		{
-			((GCHandle)valueType).Target = value;
+			var gcHandle = (GCHandle)valueType;
+			gcHandle.Target = value;
 		}
 	}
 
@@ -981,11 +1015,11 @@ internal class _003CModule_003E
 
 	[DebuggerStepThrough]
 	[SecurityCritical]
-	internal unsafe static int _initterm_e(delegate* unmanaged[Cdecl, Cdecl]<int>* pfbegin, delegate* unmanaged[Cdecl, Cdecl]<int>* pfend)
+	internal unsafe static int _initterm_e(void* pfbegin, void* pfend)
 	{
-		//IL_001c: Expected I, but got I8
-		//IL_0015: Expected I, but got I8
-		int num = 0;
+        //IL_001c: Expected I, but got I8
+        //IL_0015: Expected I, but got I8
+        int num = 0;
 		if (pfbegin < pfend)
 		{
 			while (num == 0)
@@ -993,9 +1027,9 @@ internal class _003CModule_003E
 				ulong num2 = *(ulong*)pfbegin;
 				if (num2 != 0L)
 				{
-					num = ((delegate* unmanaged[Cdecl, Cdecl]<int>)num2)();
+					num = Marshal.GetDelegateForFunctionPointer<GetIntDelegate>((IntPtr)num2)();
 				}
-				pfbegin = (delegate* unmanaged[Cdecl, Cdecl]<int>*)((ulong)(nint)pfbegin + 8uL);
+				pfbegin = (byte*)pfbegin + 8uL;
 				if (pfbegin >= pfend)
 				{
 					break;
@@ -1007,7 +1041,7 @@ internal class _003CModule_003E
 
 	[DebuggerStepThrough]
 	[SecurityCritical]
-	internal unsafe static void _initterm(delegate* unmanaged[Cdecl, Cdecl]<void>* pfbegin, delegate* unmanaged[Cdecl, Cdecl]<void>* pfend)
+	internal unsafe static void _initterm(void* pfbegin, void* pfend)
 	{
 		//IL_0016: Expected I, but got I8
 		//IL_0010: Expected I, but got I8
@@ -1020,9 +1054,9 @@ internal class _003CModule_003E
 			ulong num = *(ulong*)pfbegin;
 			if (num != 0L)
 			{
-				((delegate* unmanaged[Cdecl, Cdecl]<void>)num)();
+				Marshal.GetDelegateForFunctionPointer<FunctionDelegate>((IntPtr)num)();
 			}
-			pfbegin = (delegate* unmanaged[Cdecl, Cdecl]<void>*)((ulong)(nint)pfbegin + 8uL);
+			pfbegin = (void*)((ulong)(nint)pfbegin + 8uL);
 		}
 		while (pfbegin < pfend);
 	}
@@ -1063,51 +1097,54 @@ internal class _003CModule_003E
 		return (delegate*<void*>)_003CCrtImplementationDetails_003E_002EThisModule_002EHandle().ResolveMethodHandle((int)methodToken).GetFunctionPointer().ToPointer();
 	}
 
-	[SecurityCritical]
-	[HandleProcessCorruptedStateExceptions]
-	[ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
-	[SecurityPermission(SecurityAction.Assert, UnmanagedCode = true)]
-	internal unsafe static void ___CxxCallUnwindDtor(delegate*<void*, void> pDtor, void* pThis)
-	{
-		try
-		{
-			pDtor(pThis);
-		}
-		catch when (__FrameUnwindFilter((_EXCEPTION_POINTERS*)Marshal.GetExceptionPointers()) != 0)
-		{
-		}
-	}
-
+	// Marshal.GetExceptionPointers is not supported anymore
+	//
+	// [SecurityCritical]
+	// [HandleProcessCorruptedStateExceptions]
+	// [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
+	// [SecurityPermission(SecurityAction.Assert, UnmanagedCode = true)]
+	// internal unsafe static void ___CxxCallUnwindDtor(delegate*<void*, void> pDtor, void* pThis)
+	// {
+	// 	try
+	// 	{
+	// 		pDtor(pThis);
+	// 	}
+	// 	catch when (__FrameUnwindFilter((_EXCEPTION_POINTERS*)Marshal.GetExceptionPointers()) != 0)
+	// 	{
+	// 	}
+	// }
+
+	[DllImport("VRage.Native.dll", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
 	[MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
 	[SuppressUnmanagedCodeSecurity]
 	internal unsafe static extern void* new_005B_005D(ulong P_0);
 
-	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
+	[DllImport("VRage.Native.dll", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
 	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
 	[SuppressUnmanagedCodeSecurity]
 	internal unsafe static extern GFSDK_Aftermath_Result GFSDK_Aftermath_DX11_CreateContextHandle(ID3D11DeviceContext* P_0, GFSDK_Aftermath_ContextHandle__** P_1);
 
-	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
+	[DllImport("VRage.Native.dll", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
 	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
 	[SuppressUnmanagedCodeSecurity]
 	internal unsafe static extern GFSDK_Aftermath_Result GFSDK_Aftermath_ReleaseContextHandle(GFSDK_Aftermath_ContextHandle__* P_0);
 
-	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
+	[DllImport("VRage.Native.dll", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
 	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
 	[SuppressUnmanagedCodeSecurity]
 	internal unsafe static extern GFSDK_Aftermath_Result GFSDK_Aftermath_GetDeviceStatus(GFSDK_Aftermath_Device_Status* P_0);
 
-	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
+	[DllImport("VRage.Native.dll", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
 	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
 	[SuppressUnmanagedCodeSecurity]
 	internal unsafe static extern GFSDK_Aftermath_Result GFSDK_Aftermath_GetData(uint P_0, GFSDK_Aftermath_ContextHandle__** P_1, GFSDK_Aftermath_ContextData* P_2);
 
-	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
+	[DllImport("VRage.Native.dll", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
 	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
 	[SuppressUnmanagedCodeSecurity]
 	internal unsafe static extern GFSDK_Aftermath_Result GFSDK_Aftermath_SetEventMarker(GFSDK_Aftermath_ContextHandle__* P_0, void* P_1, uint P_2);
 
-	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
+	[DllImport("VRage.Native.dll", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
 	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
 	[SuppressUnmanagedCodeSecurity]
 	internal unsafe static extern GFSDK_Aftermath_Result GFSDK_Aftermath_DX11_Initialize(GFSDK_Aftermath_Version P_0, GFSDK_Aftermath_FeatureFlags P_1, ID3D11Device* P_2);
@@ -1120,17 +1157,17 @@ internal class _003CModule_003E
 	[SuppressUnmanagedCodeSecurity]
 	internal unsafe static extern void* _getFiberPtrId();
 
-	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
+	[DllImport("VRage.Native.dll", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
 	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
 	[SuppressUnmanagedCodeSecurity]
 	internal static extern void _cexit();
 
-	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
+	[DllImport("VRage.Native.dll", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
 	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
 	[SuppressUnmanagedCodeSecurity]
 	internal static extern void Sleep(uint P_0);
 
-	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
+	[DllImport("VRage.Native.dll", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
 	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
 	[SuppressUnmanagedCodeSecurity]
 	internal static extern void abort();
@@ -1139,7 +1176,7 @@ internal class _003CModule_003E
 	[SuppressUnmanagedCodeSecurity]
 	internal static extern void __security_init_cookie();
 
-	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
+	[DllImport("VRage.Native.dll", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
 	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
 	[SuppressUnmanagedCodeSecurity]
 	internal unsafe static extern int __FrameUnwindFilter(_EXCEPTION_POINTERS* P_0);
diff --git a/VRage.NativeAftermath/GFSDK_Aftermath_Device_Status.cs b/VRage.NativeAftermath/GFSDK_Aftermath_Device_Status.cs
index 8a045b8b..fdf4cae3 100644
--- a/VRage.NativeAftermath/GFSDK_Aftermath_Device_Status.cs
+++ b/VRage.NativeAftermath/GFSDK_Aftermath_Device_Status.cs
@@ -1,6 +1,5 @@
 using System.Runtime.CompilerServices;
 
-[NativeCppClass]
 internal enum GFSDK_Aftermath_Device_Status
 {
 
diff --git a/VRage.NativeAftermath/GFSDK_Aftermath_FeatureFlags.cs b/VRage.NativeAftermath/GFSDK_Aftermath_FeatureFlags.cs
index c766bc2e..74a65384 100644
--- a/VRage.NativeAftermath/GFSDK_Aftermath_FeatureFlags.cs
+++ b/VRage.NativeAftermath/GFSDK_Aftermath_FeatureFlags.cs
@@ -1,6 +1,5 @@
 using System.Runtime.CompilerServices;
 
-[NativeCppClass]
 internal enum GFSDK_Aftermath_FeatureFlags
 {
 
diff --git a/VRage.NativeAftermath/GFSDK_Aftermath_Result.cs b/VRage.NativeAftermath/GFSDK_Aftermath_Result.cs
index 8fb09eb5..db0ffb80 100644
--- a/VRage.NativeAftermath/GFSDK_Aftermath_Result.cs
+++ b/VRage.NativeAftermath/GFSDK_Aftermath_Result.cs
@@ -1,6 +1,5 @@
 using System.Runtime.CompilerServices;
 
-[NativeCppClass]
 internal enum GFSDK_Aftermath_Result
 {
 
diff --git a/VRage.NativeAftermath/GFSDK_Aftermath_Version.cs b/VRage.NativeAftermath/GFSDK_Aftermath_Version.cs
index bd935a17..3b36bf7c 100644
--- a/VRage.NativeAftermath/GFSDK_Aftermath_Version.cs
+++ b/VRage.NativeAftermath/GFSDK_Aftermath_Version.cs
@@ -1,6 +1,5 @@
 using System.Runtime.CompilerServices;
 
-[NativeCppClass]
 internal enum GFSDK_Aftermath_Version
 {
 
diff --git a/VRage.NativeAftermath/ICLRRuntimeHost.cs b/VRage.NativeAftermath/ICLRRuntimeHost.cs
index 1086c16d..0e6fab98 100644
--- a/VRage.NativeAftermath/ICLRRuntimeHost.cs
+++ b/VRage.NativeAftermath/ICLRRuntimeHost.cs
@@ -3,7 +3,7 @@ using System.Runtime.InteropServices;
 
 [StructLayout(LayoutKind.Sequential, Size = 8)]
 [NativeCppClass]
-internal static struct ICLRRuntimeHost
+internal struct ICLRRuntimeHost
 {
 	private long _003Calignment_0020member_003E;
 }
diff --git a/VRage.NativeAftermath/ICorRuntimeHost.cs b/VRage.NativeAftermath/ICorRuntimeHost.cs
index 9e5ee423..db04fa7a 100644
--- a/VRage.NativeAftermath/ICorRuntimeHost.cs
+++ b/VRage.NativeAftermath/ICorRuntimeHost.cs
@@ -3,7 +3,7 @@ using System.Runtime.InteropServices;
 
 [StructLayout(LayoutKind.Sequential, Size = 8)]
 [NativeCppClass]
-internal static struct ICorRuntimeHost
+internal struct ICorRuntimeHost
 {
 	private long _003Calignment_0020member_003E;
 }
diff --git a/VRage.NativeAftermath/ID3D11Device.cs b/VRage.NativeAftermath/ID3D11Device.cs
index 395fce74..a6eb9eea 100644
--- a/VRage.NativeAftermath/ID3D11Device.cs
+++ b/VRage.NativeAftermath/ID3D11Device.cs
@@ -3,7 +3,7 @@ using System.Runtime.InteropServices;
 
 [StructLayout(LayoutKind.Sequential, Size = 8)]
 [NativeCppClass]
-internal static struct ID3D11Device
+internal struct ID3D11Device
 {
 	private long _003Calignment_0020member_003E;
 }
diff --git a/VRage.NativeAftermath/ID3D11DeviceContext.cs b/VRage.NativeAftermath/ID3D11DeviceContext.cs
index 78b0b74a..4739ce73 100644
--- a/VRage.NativeAftermath/ID3D11DeviceContext.cs
+++ b/VRage.NativeAftermath/ID3D11DeviceContext.cs
@@ -3,7 +3,7 @@ using System.Runtime.InteropServices;
 
 [StructLayout(LayoutKind.Sequential, Size = 8)]
 [NativeCppClass]
-internal static struct ID3D11DeviceContext
+internal struct ID3D11DeviceContext
 {
 	private long _003Calignment_0020member_003E;
 }
diff --git a/VRage.NativeAftermath/IUnknown.cs b/VRage.NativeAftermath/IUnknown.cs
index d8f27c53..1bedc128 100644
--- a/VRage.NativeAftermath/IUnknown.cs
+++ b/VRage.NativeAftermath/IUnknown.cs
@@ -3,7 +3,7 @@ using System.Runtime.InteropServices;
 
 [StructLayout(LayoutKind.Sequential, Size = 8)]
 [NativeCppClass]
-internal static struct IUnknown
+internal struct IUnknown
 {
 	private long _003Calignment_0020member_003E;
 }
diff --git a/VRage.NativeAftermath/NativeAftermath/MyAfterMath.cs b/VRage.NativeAftermath/NativeAftermath/MyAfterMath.cs
index cb30d6ec..a3344c3b 100644
--- a/VRage.NativeAftermath/NativeAftermath/MyAfterMath.cs
+++ b/VRage.NativeAftermath/NativeAftermath/MyAfterMath.cs
@@ -33,7 +33,8 @@ public class MyAfterMath
 		if (m_initialized)
 		{
 			IntPtr value = default(IntPtr);
-			System.Runtime.CompilerServices.Unsafe.SkipInit(out GFSDK_Aftermath_ContextHandle__* ptr);
+			System.Runtime.CompilerServices.Unsafe.SkipInit(out IntPtr tmpPtr);
+			GFSDK_Aftermath_ContextHandle__* ptr = (GFSDK_Aftermath_ContextHandle__*)tmpPtr;
 			if (!m_markerTable.TryGetValue(marker, out value))
 			{
 				IntPtr intPtr = Marshal.StringToHGlobalAnsi(marker);
diff --git a/VRage.NativeAftermath/VRage.NativeAftermath.csproj b/VRage.NativeAftermath/VRage.NativeAftermath.csproj
index 2a54805d..c9785be4 100644
--- a/VRage.NativeAftermath/VRage.NativeAftermath.csproj
+++ b/VRage.NativeAftermath/VRage.NativeAftermath.csproj
@@ -12,6 +12,9 @@
   <PropertyGroup>
     <ApplicationManifest>app.manifest</ApplicationManifest>
   </PropertyGroup>
-  <ItemGroup />
+  <ItemGroup>
+    <PackageReference Include="System.Runtime.CompilerServices.Unsafe" Version="6.0.0" />
+    <PackageReference Include="System.Runtime.InteropServices" Version="4.3.0" />
+  </ItemGroup>
   <ItemGroup />
 </Project>
\ No newline at end of file
diff --git a/VRage.NativeAftermath/__scrt_native_startup_state.cs b/VRage.NativeAftermath/__scrt_native_startup_state.cs
index 2884d3dd..66ec4263 100644
--- a/VRage.NativeAftermath/__scrt_native_startup_state.cs
+++ b/VRage.NativeAftermath/__scrt_native_startup_state.cs
@@ -1,6 +1,5 @@
 using System.Runtime.CompilerServices;
 
-[NativeCppClass]
 internal enum __scrt_native_startup_state
 {
 
diff --git a/VRage.NativeAftermath/gcroot_System.cs b/VRage.NativeAftermath/gcroot_System.cs
new file mode 100644
index 00000000..e69de29b
diff --git a/VRage.Platform.Windows/VRage.Platform.Windows.csproj b/VRage.Platform.Windows/VRage.Platform.Windows.csproj
index 6366ff2b..507d5996 100644
--- a/VRage.Platform.Windows/VRage.Platform.Windows.csproj
+++ b/VRage.Platform.Windows/VRage.Platform.Windows.csproj
@@ -17,7 +17,8 @@
   <ItemGroup>
     <PackageReference Include="DirectShowLib" Version="1.0.0" />
     <PackageReference Include="GameAnalytics.Mono.SDK" Version="3.3.5" />
-    <PackageReference Include="RestSharp" Version="112.1.0" />
+    <PackageReference Include="NLog" Version="5.3.4" />
+    <PackageReference Include="RestSharp" Version="106.6.10" />
     <PackageReference Include="SharpDX" Version="4.2.0" />
     <PackageReference Include="SharpDX.DXGI" Version="4.2.0" />
     <PackageReference Include="SharpDX.Desktop" Version="4.2.0" />
@@ -25,6 +26,7 @@
     <PackageReference Include="SharpDX.DirectInput" Version="4.2.0" />
     <PackageReference Include="SharpDX.XAudio2" Version="4.2.0" />
     <PackageReference Include="SharpDX.XInput" Version="4.2.0" />
+    <PackageReference Include="System.Management.dll" Version="1.0.0" />
     <PackageReference Include="System.Memory" Version="4.5.5" />
     <PackageReference Include="System.Runtime.CompilerServices.Unsafe" Version="6.0.0" />
     <PackageReference Include="protobuf-net" Version="3.0.131" />
diff --git a/VRage.Platform.Windows/VRage/Platform/Windows/Audio/MyPlatformAudio.cs b/VRage.Platform.Windows/VRage/Platform/Windows/Audio/MyPlatformAudio.cs
index 102290de..2d8ed08a 100644
--- a/VRage.Platform.Windows/VRage/Platform/Windows/Audio/MyPlatformAudio.cs
+++ b/VRage.Platform.Windows/VRage/Platform/Windows/Audio/MyPlatformAudio.cs
@@ -12,7 +12,7 @@ internal class MyPlatformAudio : IMyPlatformAudio
 
 	public XAudio2 InitAudioEngine()
 	{
-		m_audioEngine = new XAudio2(XAudio2Version.Version29);
+		m_audioEngine = new XAudio2(XAudio2Version.Default);
 		return m_audioEngine;
 	}
 
diff --git a/VRage.Platform.Windows/VRage/Platform/Windows/Forms/MyMessageBoxCrashForm.cs b/VRage.Platform.Windows/VRage/Platform/Windows/Forms/MyMessageBoxCrashForm.cs
index 7f7501fc..41417833 100644
--- a/VRage.Platform.Windows/VRage/Platform/Windows/Forms/MyMessageBoxCrashForm.cs
+++ b/VRage.Platform.Windows/VRage/Platform/Windows/Forms/MyMessageBoxCrashForm.cs
@@ -45,7 +45,7 @@ internal class MyMessageBoxCrashForm : Form
 		Text = $"{texts.GameName} has crashed!";
 		linklblLog.Text = texts.LogName;
 		linklblLog.Links.Add(0, texts.LogName.Length, texts.LogName);
-		if (!Directory.Exists(Path.Combine(new FileInfo(MyFileSystem.ExePath).Directory.FullName, "Content")))
+		if (!Directory.Exists(Path.Combine(MyFileSystem.RootPath, "Content")))
 		{
 			MessageBox.Show("The content folder \"Content\" containing game assets is completely missing. Please verify integrity of game files using Steam. \n\n That is most likely the reason of the crash. As game cannot run without it.", "Content is missing", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
 		}
diff --git a/VRage.Platform.Windows/VRage/Platform/Windows/MyCrashReporting.cs b/VRage.Platform.Windows/VRage/Platform/Windows/MyCrashReporting.cs
index 12aa79f4..d635d443 100644
--- a/VRage.Platform.Windows/VRage/Platform/Windows/MyCrashReporting.cs
+++ b/VRage.Platform.Windows/VRage/Platform/Windows/MyCrashReporting.cs
@@ -65,6 +65,8 @@ internal class MyCrashReporting : IMyCrashReporting
 
 	public void PrepareCrashAnalyticsReporting(string logPath, bool GDPRConsent, CrashInfo info, bool isUnsupportedGpu)
 	{
+// Crash reporting has been disabled
+#if DISABLED
 		string text = (isUnsupportedGpu ? "reporX" : "report");
 		ProcessStartInfo processStartInfo = new ProcessStartInfo();
 		processStartInfo.Arguments = "-" + text + " \"" + logPath + "\" \"" + info.GameName + "\" \"" + info.AppVersion + "\" \"" + info.AnalyticId + "\"";
@@ -73,10 +75,13 @@ internal class MyCrashReporting : IMyCrashReporting
 		processStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
 		processStartInfo.RedirectStandardInput = true;
 		Process.Start(processStartInfo)?.StandardInput.Close();
+#endif
 	}
 
 	public bool ExtractCrashAnalyticsReport(string[] args, out string logPath, out CrashInfo info, out bool isUnsupportedGpu, out bool exitAfterReport)
 	{
+// Crash reporting has been disabled
+#if DISABLED
 		exitAfterReport = true;
 		for (int i = 0; i < 2; i++)
 		{
@@ -100,6 +105,7 @@ internal class MyCrashReporting : IMyCrashReporting
 			}
 			return true;
 		}
+#endif
 		logPath = null;
 		info = default(CrashInfo);
 		isUnsupportedGpu = false;
diff --git a/VRage.Platform.Windows/VRage/Platform/Windows/MyVRagePlatform.cs b/VRage.Platform.Windows/VRage/Platform/Windows/MyVRagePlatform.cs
index ddd7c8f8..89a27263 100644
--- a/VRage.Platform.Windows/VRage/Platform/Windows/MyVRagePlatform.cs
+++ b/VRage.Platform.Windows/VRage/Platform/Windows/MyVRagePlatform.cs
@@ -149,7 +149,7 @@ internal sealed class MyVRagePlatform : IVRagePlatform
 		{
 			TimeEndPeriod(1u);
 		}
-		GameAnalytics.EndSession();
+		// GameAnalytics.EndSession();
 		if (m_detectLeaks)
 		{
 			ObjectTracker.FindActiveObjects();
diff --git a/VRage.Platform.Windows/VRage/Platform/Windows/Render/MyPlatformRender.cs b/VRage.Platform.Windows/VRage/Platform/Windows/Render/MyPlatformRender.cs
index 585beb54..16b10f77 100644
--- a/VRage.Platform.Windows/VRage/Platform/Windows/Render/MyPlatformRender.cs
+++ b/VRage.Platform.Windows/VRage/Platform/Windows/Render/MyPlatformRender.cs
@@ -12,6 +12,8 @@ using VRageRender;
 
 namespace VRage.Platform.Windows.Render;
 
+using Factory = SharpDX.DXGI.Factory;
+
 internal static class MyPlatformRender
 {
 	internal struct MyDriverDetails
diff --git a/VRage.Platform.Windows/VRage/Platform/Windows/Serialization/DynamicTypeModel.cs b/VRage.Platform.Windows/VRage/Platform/Windows/Serialization/DynamicTypeModel.cs
index e9c3c566..35b9e4e0 100644
--- a/VRage.Platform.Windows/VRage/Platform/Windows/Serialization/DynamicTypeModel.cs
+++ b/VRage.Platform.Windows/VRage/Platform/Windows/Serialization/DynamicTypeModel.cs
@@ -20,7 +20,7 @@ internal class DynamicTypeModel : IProtoTypeModel
 
 	private void CreateTypeModel()
 	{
-		m_typeModel = RuntimeTypeModel.Create(setDefault: true);
+		m_typeModel = RuntimeTypeModel.Create();
 		m_typeModel.AutoAddMissingTypes = true;
 		m_typeModel.UseImplicitZeroDefaults = false;
 	}
diff --git a/VRage.Platform.Windows/VRage/Platform/Windows/Sys/MyWindowsSystem.cs b/VRage.Platform.Windows/VRage/Platform/Windows/Sys/MyWindowsSystem.cs
index ee236e11..33e451d8 100644
--- a/VRage.Platform.Windows/VRage/Platform/Windows/Sys/MyWindowsSystem.cs
+++ b/VRage.Platform.Windows/VRage/Platform/Windows/Sys/MyWindowsSystem.cs
@@ -173,6 +173,10 @@ internal sealed class MyWindowsSystem : IVRageSystem
 
 	public string GetOsName()
 	{
+		// Disabled due to:
+		// System.Runtime.InteropServices.MarshalDirectiveException: Cannot marshal 'parameter #3': Cannot marshal a string by-value with the [Out] attribute.
+		return "Windows";
+
 		string text = "";
 		try
 		{
@@ -189,6 +193,7 @@ internal sealed class MyWindowsSystem : IVRageSystem
 	{
 		if (m_cpuInfo.Name == null)
 		{
+#if DISABLED_DO_NOT_WORK
 			try
 			{
 				using ManagementObjectSearcher managementObjectSearcher = new ManagementObjectSearcher("select Name, MaxClockSpeed, NumberOfCores from Win32_Processor");
@@ -206,6 +211,10 @@ internal sealed class MyWindowsSystem : IVRageSystem
 				m_cpuInfo.Cores = 0u;
 				m_cpuInfo.MaxClock = 0u;
 			}
+#endif
+			m_cpuInfo.Cores = (uint)Environment.ProcessorCount;
+			m_cpuInfo.Name = $"Generic with {m_cpuInfo.Cores} cores";
+			m_cpuInfo.MaxClock = 3600u;
 		}
 		frequency = m_cpuInfo.MaxClock;
 		physicalCores = m_cpuInfo.Cores;
@@ -231,6 +240,9 @@ internal sealed class MyWindowsSystem : IVRageSystem
 
 	public void LogEnvironmentInformation()
 	{
+		// Prevent crash due to broken C API binding
+		return;
+
 		m_log.WriteLine("MyVideoModeManager.LogEnvironmentInformation - START");
 		m_log.IncreaseIndent();
 		try
diff --git a/VRage.Render/VRage/Render/Image/MyImage.cs b/VRage.Render/VRage/Render/Image/MyImage.cs
index 96899d5b..0eee05da 100644
--- a/VRage.Render/VRage/Render/Image/MyImage.cs
+++ b/VRage.Render/VRage/Render/Image/MyImage.cs
@@ -1,13 +1,14 @@
 using System;
 using System.Buffers;
 using System.IO;
+using System.Linq;
 using System.Runtime.CompilerServices;
 using System.Runtime.InteropServices;
 using SixLabors.ImageSharp;
 using SixLabors.ImageSharp.Advanced;
 using SixLabors.ImageSharp.Formats.Png;
+using SixLabors.ImageSharp.Memory;
 using SixLabors.ImageSharp.PixelFormats;
-using SixLabors.Memory;
 using VRage.FileSystem;
 using VRageMath;
 
@@ -29,11 +30,11 @@ public static class MyImage
 
 	public static IMyImage Load(Stream stream, bool oneChannel, bool headerOnly = false, string debugName = null)
 	{
-		IImageInfo imageInfo = SixLabors.ImageSharp.Image.Identify(stream);
+		var imageInfo = SixLabors.ImageSharp.Image.Identify(stream);
 		stream.Position = 0L;
 		if (!oneChannel)
 		{
-			oneChannel = imageInfo.MetaData.GetFormatMetaData(PngFormat.Instance).ColorType == PngColorType.Grayscale;
+			oneChannel = imageInfo.Metadata.GetPngMetadata().ColorType == PngColorType.Grayscale;
 		}
 		if (headerOnly)
 		{
@@ -44,9 +45,9 @@ public static class MyImage
 			switch ((PngBitDepth)(byte)imageInfo.PixelType.BitsPerPixel)
 			{
 			case PngBitDepth.Bit8:
-				return MyImage<byte>.Create<Gray8>(imageInfo);
+				return MyImage<byte>.Create<L8>(imageInfo);
 			case PngBitDepth.Bit16:
-				return MyImage<ushort>.Create<Gray16>(imageInfo);
+				return MyImage<ushort>.Create<L16>(imageInfo);
 			}
 		}
 		else if (oneChannel)
@@ -54,24 +55,24 @@ public static class MyImage
 			switch ((PngBitDepth)(byte)imageInfo.PixelType.BitsPerPixel)
 			{
 			case PngBitDepth.Bit8:
-				return MyImage<byte>.Create<Gray8>(stream);
+				return MyImage<byte>.Create<L8>(stream);
 			case PngBitDepth.Bit16:
-				return MyImage<ushort>.Create<Gray16>(stream);
+				return MyImage<ushort>.Create<L16>(stream);
 			}
 		}
 		else
 		{
-			PngMetaData formatMetaData = imageInfo.MetaData.GetFormatMetaData(PngFormat.Instance);
-			if (formatMetaData.ColorType != PngColorType.Grayscale)
+			var formatMetaData = imageInfo.Metadata.GetPngMetadata();
+			if (formatMetaData.ColorType != 0)
 			{
 				return MyImage<uint>.Create<Rgba32>(stream);
 			}
 			switch (formatMetaData.BitDepth)
 			{
 			case PngBitDepth.Bit8:
-				return MyImage<byte>.Create<Gray8>(stream);
+				return MyImage<byte>.Create<L8>(stream);
 			case PngBitDepth.Bit16:
-				return MyImage<ushort>.Create<Gray16>(stream);
+				return MyImage<ushort>.Create<L16>(stream);
 			}
 		}
 		return null;
@@ -89,7 +90,7 @@ public static class MyImage
 		return Load(stream, oneChannel, headerOnly: false, path);
 	}
 
-	public unsafe static void Save<TPixel>(Stream stream, FileFormat format, IntPtr dataPointer, int srcPitch, Vector2I size, uint bytesPerPixel) where TPixel : struct, IPixel<TPixel>
+	public static unsafe void Save<TPixel>(Stream stream, FileFormat format, IntPtr dataPointer, int srcPitch, Vector2I size, uint bytesPerPixel) where TPixel : unmanaged, IPixel<TPixel>
 	{
 		TPixel[] array = new TPixel[size.X * size.Y];
 		Memory<TPixel> pixelMemory = new Memory<TPixel>(array);
@@ -134,16 +135,16 @@ public class MyImage<TData> : IMyImage<TData>, IMyImage where TData : unmanaged
 
 	object IMyImage.Data => Data;
 
-	public static MyImage<TData> Create<TImage>(string path) where TImage : struct, IPixel<TImage>
+	public static MyImage<TData> Create<TImage>(string path) where TImage : unmanaged, IPixel<TImage>
 	{
 		using Stream stream = MyFileSystem.OpenRead(path);
 		return Create<TImage>(stream);
 	}
 
-	public static MyImage<TData> Create<TImage>(Stream stream) where TImage : struct, IPixel<TImage>
+	public static MyImage<TData> Create<TImage>(Stream stream) where TImage : unmanaged, IPixel<TImage>
 	{
 		using Image<TImage> image = SixLabors.ImageSharp.Image.Load<TImage>(stream);
-		TData[] data = MemoryMarshal.Cast<TImage, TData>(image.GetPixelSpan()).ToArray();
+		TData[] data = MemoryMarshal.Cast<TImage, TData>(image.GetPixelMemoryGroup().Single().Span).ToArray();
 		return new MyImage<TData>
 		{
 			Size = new Vector2I(image.Width, image.Height),
@@ -152,7 +153,7 @@ public class MyImage<TData> : IMyImage<TData>, IMyImage where TData : unmanaged
 		};
 	}
 
-	public static MyImage<TData> Create<TImage>(IImageInfo image) where TImage : struct, IPixel<TImage>
+	public static MyImage<TData> Create<TImage>(ImageInfo image) where TImage : unmanaged, IPixel<TImage>
 	{
 		return new MyImage<TData>
 		{
diff --git a/VRage.Render/VRageRender/Animations/MyConstProperty.cs b/VRage.Render/VRageRender/Animations/MyConstProperty.cs
index 347d95f9..536c07db 100644
--- a/VRage.Render/VRageRender/Animations/MyConstProperty.cs
+++ b/VRage.Render/VRageRender/Animations/MyConstProperty.cs
@@ -178,7 +178,7 @@ public class MyConstProperty<T> : IMyConstProperty
 	public virtual void DeserializeFromObjectBuilder(GenerationProperty property)
 	{
 		m_name = property.Name;
-		m_value = (T)(property.Type switch
+		object o = property.Type switch
 		{
 			"Float" => property.ValueFloat, 
 			"Vector3" => property.ValueVector3, 
@@ -187,7 +187,8 @@ public class MyConstProperty<T> : IMyConstProperty
 			"String" => property.ValueString, 
 			"MyTransparentMaterial" => MyTransparentMaterials.GetMaterial(MyStringId.GetOrCompute(property.ValueString)), 
 			_ => property.ValueInt, 
-		});
+		};
+		m_value = (T)o;
 	}
 
 	public virtual void SerializeValue(XmlWriter writer, object value)
diff --git a/VRage.Render11/SharpDX/Toolkit/Graphics/ImageSharpHelper.cs b/VRage.Render11/SharpDX/Toolkit/Graphics/ImageSharpHelper.cs
index 76cc4220..c412eb73 100644
--- a/VRage.Render11/SharpDX/Toolkit/Graphics/ImageSharpHelper.cs
+++ b/VRage.Render11/SharpDX/Toolkit/Graphics/ImageSharpHelper.cs
@@ -43,6 +43,7 @@ internal class ImageSharpHelper
 
 	private static bool BuildImageData(IMyImage image, out ImageDescription description, out GCHandle imageData)
 	{
+		imageData = new GCHandle();
 		if (image == null)
 		{
 			description = default(ImageDescription);
diff --git a/VRage.Render11/VRage/Render11/Resources/MyFileTextureImageCache.cs b/VRage.Render11/VRage/Render11/Resources/MyFileTextureImageCache.cs
index 02da7d8a..deff0459 100644
--- a/VRage.Render11/VRage/Render11/Resources/MyFileTextureImageCache.cs
+++ b/VRage.Render11/VRage/Render11/Resources/MyFileTextureImageCache.cs
@@ -112,6 +112,15 @@ internal class MyFileTextureImageCache
 	{
 		try
 		{
+			if (filepath.ToLower().EndsWith(".zip"))
+			{
+				filepath = filepath.Substring(0, filepath.Length - 4) + ".dds";
+				if (!File.Exists(filepath))
+				{
+					throw new Exception($"DDS file extracted from ZIP is missing: {filepath}");
+				}
+			}
+
 			using Stream stream = MyFileSystem.OpenRead(filepath);
 			if (stream == null)
 			{
diff --git a/VRage.Render11/VRageRender/MyTextureData.cs b/VRage.Render11/VRageRender/MyTextureData.cs
index d0583e86..006195b3 100644
--- a/VRage.Render11/VRageRender/MyTextureData.cs
+++ b/VRage.Render11/VRageRender/MyTextureData.cs
@@ -146,7 +146,7 @@ internal class MyTextureData : MyImmediateRC
 		case Format.R16_UInt:
 		case Format.R16_SNorm:
 		case Format.R16_SInt:
-			MyImage.Save<Gray16>(stream, fileFormat, dataPointer, srcPitch, size, 2u);
+			MyImage.Save<L16>(stream, fileFormat, dataPointer, srcPitch, size, 2u);
 			break;
 		case Format.B5G6R5_UNorm:
 			MyImage.Save<Bgr565>(stream, fileFormat, dataPointer, srcPitch, size, 2u);
@@ -163,7 +163,7 @@ internal class MyTextureData : MyImmediateRC
 		case Format.R8_SNorm:
 		case Format.R8_SInt:
 		case Format.A8_UNorm:
-			MyImage.Save<Gray8>(stream, fileFormat, dataPointer, srcPitch, size, 1u);
+			MyImage.Save<L8>(stream, fileFormat, dataPointer, srcPitch, size, 1u);
 			break;
 		}
 	}
diff --git a/VRage.Scripting/VRage/Scripting/MyScriptCompiler.cs b/VRage.Scripting/VRage/Scripting/MyScriptCompiler.cs
index 0615dfd0..4f2cd89e 100644
--- a/VRage.Scripting/VRage/Scripting/MyScriptCompiler.cs
+++ b/VRage.Scripting/VRage/Scripting/MyScriptCompiler.cs
@@ -8,7 +8,6 @@ using System.Linq;
 using System.Reflection;
 using System.Text;
 using System.Threading.Tasks;
-using System.Xml;
 using Microsoft.CodeAnalysis;
 using Microsoft.CodeAnalysis.CSharp;
 using Microsoft.CodeAnalysis.Diagnostics;
@@ -26,7 +25,7 @@ namespace VRage.Scripting;
 /// </summary>
 public class MyScriptCompiler
 {
-	public static readonly MyScriptCompiler Static = new MyScriptCompiler();
+	public static MyScriptCompiler Static; // Initialized by MyVRageScriptingInternal.Initialize
 
 	private readonly List<MetadataReference> m_metadataReferences = new List<MetadataReference>();
 
@@ -67,9 +66,9 @@ public class MyScriptCompiler
 	/// </summary>
 	public bool EnableDebugInformation { get; set; }
 
-	private MyScriptCompiler()
+	public MyScriptCompiler(string[] assemblyLocations)
 	{
-		AddReferencedAssemblies(GetType().Assembly.Location, typeof(int).Assembly.Location, typeof(XmlEntity).Assembly.Location, typeof(HashSet<>).Assembly.Location, typeof(Dictionary<, >).Assembly.Location, typeof(Uri).Assembly.Location);
+		AddReferencedAssemblies(assemblyLocations);
 		AddImplicitInGameNamespacesFromTypes(typeof(object), typeof(StringBuilder), typeof(IEnumerable), typeof(IEnumerable<>), typeof(Enumerable));
 		AddImplicitTypeMappings(typeof(INotifyPropertyChanging), typeof(PropertyChangingEventHandler), typeof(PropertyChangingEventArgs), typeof(INotifyPropertyChanged), typeof(PropertyChangedEventHandler), typeof(PropertyChangedEventArgs));
 		AddUnblockableInGameExceptions(typeof(ScriptOutOfRangeException));
@@ -126,7 +125,7 @@ public class MyScriptCompiler
 				ImmutableArray<SyntaxTree> syntaxTrees = compilation.SyntaxTrees;
 				newSyntaxTrees = ((syntaxTrees.Length != 1) ? (await Task.WhenAll(syntaxTrees.Select((SyntaxTree x) => Task.Run(() => syntaxTreeInjector(compilation, x, trackMemoryUsage)))).ConfigureAwait(continueOnCapturedContext: false)) : new SyntaxTree[1] { syntaxTreeInjector(compilation, syntaxTrees[0], trackMemoryUsage) });
 			}
-			catch
+			catch(Exception ex)
 			{
 				injectionFailed = true;
 			}
@@ -320,7 +319,7 @@ public class MyScriptCompiler
 		return CSharpCompilation.Create(MakeAssemblyName(assemblyFileName), syntaxTrees, m_metadataReferences, options);
 	}
 
-	public void AddReferencedAssemblies(params string[] assemblyLocations)
+	public void AddReferencedAssemblies(string[] assemblyLocations)
 	{
 		foreach (string text in assemblyLocations)
 		{
diff --git a/VRage.Scripting/VRage/Scripting/MyScriptWhitelist.cs b/VRage.Scripting/VRage/Scripting/MyScriptWhitelist.cs
index 95c3f51e..53f3c16a 100644
--- a/VRage.Scripting/VRage/Scripting/MyScriptWhitelist.cs
+++ b/VRage.Scripting/VRage/Scripting/MyScriptWhitelist.cs
@@ -439,7 +439,7 @@ public class MyScriptWhitelist : IMyScriptBlacklist
 		myWhitelistBatch.AllowMembers(MyWhitelistTarget.Both, typeof(ValueType).GetMethod("Equals"), typeof(ValueType).GetMethod("GetHashCode"), typeof(ValueType).GetMethod("ToString"));
 		myWhitelistBatch.AllowMembers(MyWhitelistTarget.Both, typeof(Environment).GetProperty("CurrentManagedThreadId", BindingFlags.Static | BindingFlags.Public), typeof(Environment).GetProperty("NewLine", BindingFlags.Static | BindingFlags.Public), typeof(Environment).GetProperty("ProcessorCount", BindingFlags.Static | BindingFlags.Public));
 		Type type = typeof(Type).Assembly.GetType("System.RuntimeType");
-		myWhitelistBatch.AllowMembers(MyWhitelistTarget.Both, type.GetMethod("op_Inequality"), type.GetMethod("GetFields", new Type[1] { typeof(BindingFlags) }));
+		myWhitelistBatch.AllowMembers(MyWhitelistTarget.Both, type.GetMethod("GetFields", new Type[1] { typeof(BindingFlags) }));
 		myWhitelistBatch.AllowMembers(MyWhitelistTarget.Both, (from m in AllDeclaredMembers(typeof(Delegate))
 			where m.Name != "CreateDelegate"
 			select m).ToArray());
@@ -611,9 +611,11 @@ public class MyScriptWhitelist : IMyScriptBlacklist
 	private void Register(MyWhitelistTarget target, INamespaceSymbol symbol, Type type)
 	{
 		string whitelistKey = symbol.GetWhitelistKey(TypeKeyQuantity.AllMembers);
-		if (m_whitelist.ContainsKey(whitelistKey))
+		if (m_whitelist.TryGetValue(whitelistKey, out var existingTarget))
 		{
-			throw new MyWhitelistException("Duplicate registration of the whitelist key " + whitelistKey + " retrieved from " + type);
+			if (existingTarget == target)
+				return;
+			throw new MyWhitelistException("Duplicate registration of the whitelist key " + whitelistKey + " retrieved from " + type + "for different targets");
 		}
 		m_whitelist.Add(whitelistKey, target);
 	}
diff --git a/VRage.Scripting/VRage/Scripting/MyVRageScriptingInternal.cs b/VRage.Scripting/VRage/Scripting/MyVRageScriptingInternal.cs
index 3b8eae96..f0abbe99 100644
--- a/VRage.Scripting/VRage/Scripting/MyVRageScriptingInternal.cs
+++ b/VRage.Scripting/VRage/Scripting/MyVRageScriptingInternal.cs
@@ -49,7 +49,7 @@ internal class MyVRageScriptingInternal : IVRageScripting
 	public void Initialize(Thread updateThread, IEnumerable<string> referencedAssemblies, Type[] referencedTypes, string[] symbols, string diagnosticsPath, bool enableScriptsPDBs)
 	{
 		MyModWatchdog.Init(updateThread);
-		MyScriptCompiler.Static.AddReferencedAssemblies(referencedAssemblies.ToArray());
+		MyScriptCompiler.Static = new MyScriptCompiler(referencedAssemblies.ToArray());
 		MyScriptCompiler.Static.AddImplicitInGameNamespacesFromTypes(referencedTypes);
 		MyScriptCompiler.Static.AddConditionalCompilationSymbols(symbols);
 		if (!string.IsNullOrEmpty(diagnosticsPath))
diff --git a/VRage.Scripting/VRage/Scripting/Rewriters/PerfCountingRewriter.cs b/VRage.Scripting/VRage/Scripting/Rewriters/PerfCountingRewriter.cs
index 8b559bb4..9e08dcc3 100644
--- a/VRage.Scripting/VRage/Scripting/Rewriters/PerfCountingRewriter.cs
+++ b/VRage.Scripting/VRage/Scripting/Rewriters/PerfCountingRewriter.cs
@@ -300,6 +300,10 @@ internal class PerfCountingRewriter : CSharpSyntaxRewriter
 
 	public static SyntaxTree Rewrite(CSharpCompilation compilation, SyntaxTree syntaxTree, int modId)
 	{
+		// Disabled performance counting, otherwise mod compilation fails with repeated diagnostic error messages:
+		// The type or namespace name 'CompilerMethods' does not exist in the namespace 'VRage.Scripting' (are you missing an assembly reference?)
+		return syntaxTree;
+
 		SyntaxNode root = new PerfCountingRewriter(compilation, syntaxTree, modId).Visit(syntaxTree.GetRoot());
 		return syntaxTree.WithRootAndOptions(root, syntaxTree.Options);
 	}
diff --git a/VRage/VRage.csproj b/VRage/VRage.csproj
index 1660b161..fa301af1 100644
--- a/VRage/VRage.csproj
+++ b/VRage/VRage.csproj
@@ -11,9 +11,16 @@
   <PropertyGroup />
   <ItemGroup />
   <ItemGroup>
+    <PackageReference Include="Newtonsoft.Json" Version="13.0.3" />
     <PackageReference Include="protobuf-net.Core" Version="3.0.131" />
     <ProjectReference Include="..\VRage.Library\VRage.Library.csproj" />
     <ProjectReference Include="..\VRage.Math\VRage.Math.csproj" />
     <ProjectReference Include="..\VRage.Network\VRage.Network.csproj" />
   </ItemGroup>
+  <ItemGroup>
+    <Content Include="..\ReplicatedTypes.json">
+      <Link>ReplicatedTypes.json</Link>
+      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
+    </Content>
+  </ItemGroup>
 </Project>
\ No newline at end of file
diff --git a/VRage/VRage/CustomRootWriter.cs b/VRage/VRage/CustomRootWriter.cs
index 614a0e96..2140d607 100644
--- a/VRage/VRage/CustomRootWriter.cs
+++ b/VRage/VRage/CustomRootWriter.cs
@@ -24,11 +24,14 @@ public class CustomRootWriter : XmlWriter
 
 	public override WriteState WriteState => m_target.WriteState;
 
+	public const string XSD_NS_URL = "http://www.w3.org/2001/XMLSchema";
+	public const string XSI_NS_URL = "http://www.w3.org/2001/XMLSchema-instance";
+
 	internal void Init(string customRootType, XmlWriter target)
 	{
 		m_target = target;
 		m_customRootType = customRootType;
-		m_target.WriteAttributeString("xsi:type", m_customRootType);
+		m_target.WriteAttributeString("xsi", "type", XSI_NS_URL, m_customRootType);
 		m_currentDepth = 0;
 	}
 
diff --git a/VRage/VRage/GameServices/MyInventoryHelper.cs b/VRage/VRage/GameServices/MyInventoryHelper.cs
index 43c984b9..0a1c0b73 100644
--- a/VRage/VRage/GameServices/MyInventoryHelper.cs
+++ b/VRage/VRage/GameServices/MyInventoryHelper.cs
@@ -1,3 +1,6 @@
+// See https://learn.microsoft.com/en-us/dotnet/standard/serialization/binaryformatter-security-guide
+#pragma warning disable SYSLIB0011
+
 using System.Collections.Generic;
 using System.IO;
 using System.Runtime.Serialization.Formatters.Binary;
@@ -32,3 +35,5 @@ public static class MyInventoryHelper
 		return memoryStream.ToArray();
 	}
 }
+
+#pragma warning restore SYSLIB0011
diff --git a/VRage/VRage/MyAbstractXmlSerializer.cs b/VRage/VRage/MyAbstractXmlSerializer.cs
index 6844e077..cbd087d3 100644
--- a/VRage/VRage/MyAbstractXmlSerializer.cs
+++ b/VRage/VRage/MyAbstractXmlSerializer.cs
@@ -39,7 +39,7 @@ public class MyAbstractXmlSerializer<TAbstractBase> : MyXmlSerializerBase<TAbstr
 
 	protected virtual string GetTypeAttribute(XmlReader reader)
 	{
-		return reader.GetAttribute("xsi:type");
+		return reader.GetAttribute("type", CustomRootWriter.XSI_NS_URL);
 	}
 
 	public static implicit operator MyAbstractXmlSerializer<TAbstractBase>(TAbstractBase builder)
diff --git a/VRage/VRage/Network/EndpointId.cs b/VRage/VRage/Network/EndpointId.cs
index 6e7693ee..768d44f8 100644
--- a/VRage/VRage/Network/EndpointId.cs
+++ b/VRage/VRage/Network/EndpointId.cs
@@ -26,7 +26,7 @@ public struct EndpointId
 		}
 	}
 
-	public readonly ulong Value;
+	public ulong Value;
 
 	public static EndpointId Null = new EndpointId(0uL);
 
diff --git a/VRage/VRage/Network/EventAttribute.cs b/VRage/VRage/Network/EventAttribute.cs
index 5f8c1b69..28ec7acd 100644
--- a/VRage/VRage/Network/EventAttribute.cs
+++ b/VRage/VRage/Network/EventAttribute.cs
@@ -10,7 +10,9 @@ public class EventAttribute : Attribute
 
 	public readonly string Serialization;
 
-	public EventAttribute(string serializationMethod = null, [CallerLineNumber] int order = 0)
+	// Keep the original line numbers for compatibility with the official game and server
+	// public EventAttribute(string serializationMethod = null, [CallerLineNumber] int order = 0)
+	public EventAttribute(string serializationMethod = null, int order = 0)
 	{
 		Order = order;
 		Serialization = serializationMethod;
diff --git a/VRage/VRage/Network/MyEventTable.cs b/VRage/VRage/Network/MyEventTable.cs
index 90bd2a18..021bc771 100644
--- a/VRage/VRage/Network/MyEventTable.cs
+++ b/VRage/VRage/Network/MyEventTable.cs
@@ -6,6 +6,8 @@ using System.Linq.Expressions;
 using System.Reflection;
 using VRage.Library.Collections;
 using VRage.Serialization;
+using VRage.Utils.Keen;
+using MethodInfoExtensions = System.MethodInfoExtensions;
 
 namespace VRage.Network;
 
@@ -123,10 +125,33 @@ public class MyEventTable
 			{
 				array[num + 1] = parameters[num].ParameterType;
 			}
+
+			// Look up the event tables recorded form the vanilla game
+			var methodSignature = method.GetSignature();
+			Dictionary<string, uint> eventTable;
+			if (method.IsStatic)
+			{
+				eventTable = ReplicatedTypes.StaticEventIdBySignature;
+			}
+			else
+			{
+				var declaringTypeFullName = method.DeclaringType?.FullName ?? "";
+				var typeId = ReplicatedTypes.TypeIdByFullName.GetValueOrDefault(declaringTypeFullName);
+
+				if (!ReplicatedTypes.InstanceEventIdBySignature.TryGetValue(typeId, out eventTable))
+				{
+					throw new Exception($"Cannot find replication event ID table for method: {methodSignature}");
+				}
+			}
+			if (!eventTable.TryGetValue(methodSignature, out var eventId))
+			{
+				throw new Exception($"Cannot find replication event ID for method: {methodSignature}");
+			}
+
 			CallSite callSite = (CallSite)m_createCallSite.MakeGenericMethod(array).Invoke(this, new object[2]
 			{
 				method,
-				(uint)m_idToEvent.Count
+				eventId
 			});
 			if ((callSite.HasBroadcastExceptFlag ? 1 : 0) + (callSite.HasBroadcastFlag ? 1 : 0) + (callSite.HasClientFlag ? 1 : 0) > 1)
 			{
diff --git a/VRage/VRage/Network/MyReplicationClient.cs b/VRage/VRage/Network/MyReplicationClient.cs
index 98f24180..e474384e 100644
--- a/VRage/VRage/Network/MyReplicationClient.cs
+++ b/VRage/VRage/Network/MyReplicationClient.cs
@@ -1,6 +1,7 @@
 using System;
 using System.Collections.Generic;
 using System.Diagnostics;
+using System.IO;
 using System.Runtime.ExceptionServices;
 using System.Security;
 using System.Text;
diff --git a/VRage/VRage/Network/MySynchronizedTypeInfo.cs b/VRage/VRage/Network/MySynchronizedTypeInfo.cs
index 505137ea..e46287ac 100644
--- a/VRage/VRage/Network/MySynchronizedTypeInfo.cs
+++ b/VRage/VRage/Network/MySynchronizedTypeInfo.cs
@@ -28,7 +28,9 @@ public class MySynchronizedTypeInfo
 	{
 		Type = type;
 		TypeId = id;
-		TypeHash = GetHashFromType(type);
+		// We must use the type hash from the original game, because they are used to reorder the type table
+		// to have the same order as the server's type table while joining a multiplayer game as a client
+		TypeHash = ReplicatedTypes.TypeHashByTypeId[id]; // GetHashFromType(type);
 		TypeName = type.Name;
 		FullTypeName = type.FullName;
 		BaseType = baseType;
@@ -36,8 +38,10 @@ public class MySynchronizedTypeInfo
 		EventTable = new MyEventTable(this);
 	}
 
+	/* Using the hashes from the original game instead, so this is disabled.
 	public static int GetHashFromType(Type type)
 	{
 		return MyStringHash.GetOrCompute(type.ToString()).GetHashCode();
 	}
+	*/
 }
diff --git a/VRage/VRage/Network/MyTypeTable.cs b/VRage/VRage/Network/MyTypeTable.cs
index 47605956..8899e3c5 100644
--- a/VRage/VRage/Network/MyTypeTable.cs
+++ b/VRage/VRage/Network/MyTypeTable.cs
@@ -54,8 +54,19 @@ public class MyTypeTable
 			bool flag3 = IsSerializableClass(type);
 			if (flag || flag2 || flag3)
 			{
-				value = new MySynchronizedTypeInfo(type, new TypeId((uint)m_idToType.Count), mySynchronizedTypeInfo, flag);
-				m_idToType.Add(value);
+				// Determine the type ID as it was recorded from the original game
+				if (!ReplicatedTypes.TypeIdByFullName.TryGetValue(type.FullName ?? "N/A", out var typeId))
+				{
+					throw new Exception($"Cannot find replication type ID by full type name: {type.FullName}");
+				}
+
+				value = new MySynchronizedTypeInfo(type, new TypeId(typeId), mySynchronizedTypeInfo, flag);
+				var minLen = typeId + 1;
+				while (m_idToType.Count < minLen)
+				{
+					m_idToType.Add(null);
+				}
+				m_idToType[(int)typeId] = value;
 				m_hashLookup.Add(value.TypeHash, value);
 				m_typeLookup.Add(type, value);
 				if (flag || flag2)
@@ -89,6 +100,11 @@ public class MyTypeTable
 	{
 		if ((!type.HasAttribute<SerializableAttribute>() || type.HasAttribute<CompilerGeneratedAttribute>()) && !type.IsEnum)
 		{
+			// Compatibility with the original server,
+			// these two items are present in the type table on .NET Framework 4.8
+			if (type.FullName == "System.Delegate" || type.FullName == "System.MulticastDelegate")
+				return true;
+
 			return typeof(MulticastDelegate).IsAssignableFrom(type.BaseType);
 		}
 		return true;
@@ -145,22 +161,38 @@ public class MyTypeTable
 			}
 			return;
 		}
+
 		int num = (int)stream.ReadUInt32Variant();
 		if (m_idToType.Count != num)
 		{
-			MyLog.Default.WriteLine($"Bad number of types from server. Recieved {num}, have {m_idToType.Count}");
+			// This is a fatal error condition, because of m_idToType[j] in the logic below
+			throw new Exception($"Bad number of types from server. Receieved {num}, have {m_idToType.Count}");
+		}
+
+		for (var i = 0; i < num; i++)
+		{
+			m_idToType[i] = null;
 		}
+
 		m_staticEventTable = new MyEventTable(null);
 		for (int j = 0; j < num; j++)
 		{
 			int num2 = stream.ReadInt32();
 			if (!m_hashLookup.ContainsKey(num2))
 			{
-				MyLog.Default.WriteLine("Type hash not found! Value: " + num2);
+				throw new Exception("Type hash not found! Value: " + num2);
 			}
 			MySynchronizedTypeInfo mySynchronizedTypeInfo = m_hashLookup[num2];
 			m_idToType[j] = mySynchronizedTypeInfo;
 			m_staticEventTable.AddStaticEvents(mySynchronizedTypeInfo.Type);
 		}
+
+		for (var i = 0; i < num; i++)
+		{
+			if (m_idToType[i] == null)
+			{
+				throw new Exception($"Type ID {i} is missing after the reordering based on server response");
+			}
+		}
 	}
 }
diff --git a/VRage/VRage/Network/ReplicatedTypes.cs b/VRage/VRage/Network/ReplicatedTypes.cs
new file mode 100644
index 00000000..d4d0688f
--- /dev/null
+++ b/VRage/VRage/Network/ReplicatedTypes.cs
@@ -0,0 +1,69 @@
+using System.Collections.Generic;
+using System.IO;
+using Newtonsoft.Json;
+using VRage.FileSystem;
+
+namespace VRage.Network;
+
+public static class ReplicatedTypes
+{
+    public const uint Static = 0xffffu;
+
+    public class ReplicationTypeInfo
+    {
+        public uint TypeId { get; set; }
+        public int TypeHash { get; set; }
+        public string FullTypeName { get; set; }
+        public Dictionary<uint, string> Events { get; set; } = new Dictionary<uint, string>();
+
+        public ReplicationTypeInfo(uint typeId, int typeHash, string fullTypeName)
+        {
+            TypeId = typeId;
+            TypeHash = typeHash;
+            FullTypeName = fullTypeName;
+        }
+    }
+
+    public static readonly Dictionary<string, uint> StaticEventIdBySignature = new();
+    public static readonly Dictionary<string, uint> TypeIdByFullName = new();
+    public static readonly Dictionary<uint, int> TypeHashByTypeId = new();
+    public static readonly Dictionary<uint, Dictionary<string, uint>> InstanceEventIdBySignature = new();
+
+    public static bool loaded;
+
+    public static void Load()
+    {
+        if (loaded)
+            return;
+
+        var path = Path.Combine(MyFileSystem.ExePath, "ReplicatedTypes.json");
+        var json = File.ReadAllText(path);
+        var types = JsonConvert.DeserializeObject<List<ReplicationTypeInfo>>(json);
+
+        foreach (var replicationTypeInfo in types)
+        {
+            if (replicationTypeInfo.TypeId == Static)
+            {
+                LoadEvents(StaticEventIdBySignature, replicationTypeInfo.Events);
+                continue;
+            }
+
+            TypeIdByFullName[replicationTypeInfo.FullTypeName] = replicationTypeInfo.TypeId;
+            TypeHashByTypeId[replicationTypeInfo.TypeId] = replicationTypeInfo.TypeHash;
+
+            var eventsBySignature = new Dictionary<string, uint>();
+            LoadEvents(eventsBySignature, replicationTypeInfo.Events);
+            InstanceEventIdBySignature[replicationTypeInfo.TypeId] = eventsBySignature;
+        }
+
+        loaded = true;
+    }
+
+    private static void LoadEvents(Dictionary<string, uint> eventsBySignature, Dictionary<uint, string> jsonEvents)
+    {
+        foreach (var (eventId, signature) in jsonEvents)
+        {
+            eventsBySignature[signature] = eventId;
+        }
+    }
+}
\ No newline at end of file
diff --git a/VRage/VRage/Serialization/StaticTypeModel.cs b/VRage/VRage/Serialization/StaticTypeModel.cs
deleted file mode 100644
index 3e6b511e..00000000
--- a/VRage/VRage/Serialization/StaticTypeModel.cs
+++ /dev/null
@@ -1,34 +0,0 @@
-using System;
-using System.Collections.Generic;
-using ProtoBuf.Meta;
-
-namespace VRage.Serialization;
-
-/// <summary>
-/// A precompiled ProtoBuf type model.
-/// </summary>
-public class StaticTypeModel : IProtoTypeModel
-{
-	public TypeModel Model { get; }
-
-	/// <inheritdoc />
-	public StaticTypeModel()
-	{
-		Model = TypeModel.LoadCompiled("ProtoContracts.dll", "ProtoContracts", setDefault: true);
-	}
-
-	public StaticTypeModel(string assembly, string typeName)
-	{
-		Model = TypeModel.LoadCompiled(assembly, typeName, setDefault: true);
-	}
-
-	/// <inheritdoc />
-	public void RegisterTypes(IEnumerable<Type> types)
-	{
-	}
-
-	/// <inheritdoc />
-	public void FlushCaches()
-	{
-	}
-}
diff --git a/VRage/VRage/Utils/Keen/MethodInfoExtensions.cs b/VRage/VRage/Utils/Keen/MethodInfoExtensions.cs
new file mode 100644
index 00000000..914ad9d7
--- /dev/null
+++ b/VRage/VRage/Utils/Keen/MethodInfoExtensions.cs
@@ -0,0 +1,15 @@
+using System.Linq;
+using System.Reflection;
+
+namespace VRage.Utils.Keen;
+
+public static class MethodInfoExtensions
+{
+    public static string GetSignature(this MethodInfo methodInfo)
+    {
+        var parameters = string.Join(",", methodInfo.GetParameters()
+            .Select(p => $"{p.ParameterType.Name}"));
+
+        return $"{methodInfo.ReturnType.Name} {methodInfo.DeclaringType?.FullName}.{methodInfo.Name}({parameters})";
+    }
+}
\ No newline at end of file
diff --git a/VRage/VRage/Voxels/MyStorageData.cs b/VRage/VRage/Voxels/MyStorageData.cs
index a6911381..724b5ab3 100644
--- a/VRage/VRage/Voxels/MyStorageData.cs
+++ b/VRage/VRage/Voxels/MyStorageData.cs
@@ -1,3 +1,6 @@
+// See https://learn.microsoft.com/en-us/dotnet/standard/serialization/binaryformatter-security-guide
+#pragma warning disable SYSLIB0011
+
 using System;
 using System.Collections;
 using System.Collections.Generic;
@@ -654,3 +657,5 @@ public class MyStorageData
 		return (MyStorageData)new BinaryFormatter().Deserialize(serializationStream);
 	}
 }
+
+#pragma warning restore SYSLIB0011
-- 
2.47.1.windows.2

